var _display = require('./display');
var _render = require('./render');
var _cookie = require('./cookie');
var path = require('path');
var redis = require('./redis');


//提取虚拟主机服务器内部route数组
exports.extraction = function(config){
    var route = [];

    //判断虚拟主机的类型和配置，为其生成封装路由的数组
    if(config.serverType=='static'){
        route.push(function(route,num,req,res){
            _display(config.serverDir + '/' + req.url,req,res);
        });
        return route;
    }

    if(config.serverType=='dynamic'){
        //不需要设置自动封装的类
        route.push(display);
        route.push(render);
        route.push(cookie);
        route.push(setCookie);

        //需要开启设置的类
        if(config.session){
            route.push(session);
            route.push(setSession);
        }

        route.push(filter);
        return route;
    }

};

//封装方法
function display(route,num,req,res,config){
    res.display = function(file){
        _display(file,req,res);
    };
    route[++num](route,num,req,res,config);
}

function render(route,num,req,res,config){
    res.render = function(file,obj){
        _render(file,obj||{},req,res);
    };
    route[++num](route,num,req,res,config);
}

function session(route,num,req,res,config){
    redis.hgetall(req.cookie[config.sessionId], function (err, obj) {
        req.session = obj;
        route[++num](route,num,req,res,config);
    });
}

function setSession(route,num,req,res,config){
    res.setSession = function(session){
        if(req.cookie[config.sessionId]){
            redis.hmset(req.cookie[config.sessionId], session);
        }else{
            var a = harbors.utils.uid(20);
            var b = {};
            b[config.sessionId] = a;
            res.setCookie(b);
            redis.hmset(a, session);
        }
    };
    route[++num](route,num,req,res,config);
}

function cookie(route,num,req,res,config){
    req.cookie = _cookie.cookie(req);
    route[++num](route,num,req,res,config);
}

function setCookie(route,num,req,res,config){
    res.setCookie = function(cookie,path,time){
        _cookie.setCookie(cookie,time,path,req,res);
    };
    route[++num](route,num,req,res,config);
}

function filter(route,num,req,res,config){
    //最后一个路由，转交权限给filter.js
    console.log('controller : '+harbors.config.baseDir+'/controller/'+config.serverDir+'/filter');
    try{
        require(harbors.config.baseDir+'/controller/'+config.serverDir+'/filter')(req,res);
    }catch(err){
        console.log(err);
        res.end('404');
    }
}
