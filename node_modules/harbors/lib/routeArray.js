var _display = require('./display');
var _render = require('./render');
var _cookie = require('./cookie');
var path = require('path');
var querystring = require('querystring');
var response = require('./response');

if(harbors.config.redis&&harbors.config.redis.Use){
    var _redis = require('./redis');
}
if(harbors.config.mysql&&harbors.config.mysql.Use){
    var _mysql = require('./mysql');
}



//提取虚拟主机服务器内部route数组
exports.extraction = function(config){
    var route = [];

    //判断虚拟主机的类型和配置，为其生成封装路由的数组
    if(config.serverType=='static'){
        route.push(function(route,num,req,res){
            _display(config.serverDir + '/' + req.url,req,res);
        });
        return route;
    }

    if(config.serverType=='dynamic'){
        //不需要设置自动封装的类
        route.push(display);
        route.push(path_);
        route.push(cookie);
        route.push(POST);
        route.push(GET);
        route.push(setCookie);
        route.push(redirect);

        //需要开启设置的类
        if(config.jade){
            route.push(render);
        }
        if(config.session){
            route.push(session);
            route.push(setSession);
        }

        //最后一个路由
        route.push(filter);
        return route;
    }

};

//封装方法
function display(route,num,req,res,config){
    res.display = function(file){
        _display(file,req,res);
    };
    route[++num](route,num,req,res,config);
}

function render(route,num,req,res,config){
    res.render = function(file,obj){
        _render(file,obj||{},req,res,config);
    };
    route[++num](route,num,req,res,config);
}

function session(route,num,req,res,config){
    _redis.get(req.cookie[config.sessionId], function (err, obj) {
        var t = eval('('+obj+')');
        if(t==null) t={};
        req.session = t;
        route[++num](route,num,req,res,config);
    });
}

function setSession(route,num,req,res,config){
    res.setSession = function(session,expire){
        //删除session
        if(expire==0&&req.cookie[config.sessionId]){
            for(var p in session){
                delete req.session[p];
            }
            _redis.set(req.cookie[config.sessionId], JSON.stringify(req.session));
            return false;
        }
        if(req.cookie[config.sessionId]&&req.session!=null){
            _redis.set(req.cookie[config.sessionId], JSON.stringify(session));
            //过期时间
            _redis.expire(req.cookie[config.sessionId], expire||config.SessionSurvavil/1000);
        }else{
            var a = harbors.utils.uid(20);
            var b = {};
            b[config.sessionId] = a;
            res.setCookie(b,undefined,undefined,true);
            _redis.set(a, JSON.stringify(session));
            //过期时间
            _redis.expire(a, expire||config.SessionSurvavil/1000);
        }
    };
    route[++num](route,num,req,res,config);
}

function path_(route,num,req,res,config){
    req.path = req.url.split('?')[0].replace(/^\//,'').split('/');
    if(req.path[0]=='favicon.ico'){
        res.display(config.serverDir + '/' + req.url);
    }else{
        route[++num](route,num,req,res,config);
    }
}

function cookie(route,num,req,res,config){
    req.cookie = _cookie.cookie(req);
    route[++num](route,num,req,res,config);
}

function setCookie(route,num,req,res,config){
    res.setCookie = function(cookie,path,time,httponly){
        console.log(httponly)
        _cookie.setCookie(cookie,time,path,req,res,httponly);
    };
    route[++num](route,num,req,res,config);
}

function GET(route,num,req,res,config){
    var t = req.url.split('?');
    if(t[1]){
        req.get = querystring.parse(t[1]);
    }else{
        req.get = {};
    }
    route[++num](route,num,req,res,config);
}

function POST(route,num,req,res,config){
    var info = '';
    req.addListener('data', function(chunk){
        info += chunk;
    }).addListener('end', function(){
            info = querystring.parse(info);
            req.post = info;
            route[++num](route,num,req,res,config);
        });
}

function filter(route,num,req,res,config){
    //最后一个路由，转交权限给filter.js
    harbors.log('controller : '+harbors.config.baseDir+'/controller/'+config.serverDir+'/filter');
    try{
        require(harbors.config.baseDir+'/controller/'+config.serverDir+'/filter')(req,res);
    }catch(err){
        harbors.err(err);
        response.h404(res);
    }
}

function redirect(route,num,req,res,config){
    res.redirect = function(path){
        res.end('<script>window.location.href="'+path+'"</script>');
    };
    route[++num](route,num,req,res,config);
}

