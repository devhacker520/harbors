/**
 * The configuration file handling module
 */
var path = require('path');
var $fs = require('./file');
var querystring = require("querystring");

/**
 * Read the INI file
 *
 * @param {String} filename
 * returns {Object}
 */
exports.load = function (filename) {
    var config = {};
    var configType = function(type){
        switch(type){
            case 'vhost':
                if(_host['server_name']){
                    config[_host['server_name']] = _host;
                    delete config[_host['server_name']]['server_name'];
                }
                _host = {};
                break;
        }
    };

    //判断filename是否为绝对地址
    filename = $fs.path(filename);

    var file = $fs.readFile(filename);
    if(!file) return undefined;

    //切割字符串
    var fileSplit = file.split(/[\r\n]/);
    //过滤换行、空字符、错误
    fileSplit = fileSplit.filter(function(a){
        if(a!='') return a;
    });
    //过滤无用空格
    fileSplit = fileSplit.map(function(a){
        return a.replace(/\s/g,'');
    });
    //逐行解析
    var type = '';
    var _host = {};
    fileSplit.map(function(a){
        if(/^\[.*?\]$/.test(a)){//配置标题
            configType(type);

            type = a.substr(1, a.length-2);//暂存下列配置类型
            return a;
        }
        if(/^(#|\/\/)/.test(a)){//注释信息
            return a;
        }
        var obj = querystring.parse(a);
        if(typeof(obj)=='object'&&type=='server'){//语法正确并且为server的配置信息
            if(!config[type]) config[type] = {};
            for(var p in obj){
                if(config[type][p]){
                    typeof(config[type][p])=='string' ?
                        (config[type][p] = [config[type][p]], config[type][p].push(obj[p])) :
                        config[type][p].push(obj[p]);
                }else{
                    config[type][p] = obj[p];
                }
            }
        }
        if(typeof(obj)=='object'&&type=='vhost'){
            for(var p in obj){
                if(_host[p]){
                    typeof(_host[p])=='string' ?
                        (_host[p] = [_host], _host[p].push(obj[p])) :
                        _host[p].push(obj[p]);
                }else{
                    _host[p] = obj[p];
                }
            }
        }
    });
    configType(type);
    //将相对地址转为绝对地址
    for(var p in config){
        config[p].dir = $fs.path(config[p].dir);
        config[p].log_dir = $fs.path(config[p].log_dir);
        config[p].tmp_dir = $fs.path(config[p].tmp_dir);
    }

    return config;
};

exports.merge = function(){
    for(var p in harbors.config){
        if(p!='server')
            harbors.utils.merge(harbors.config[p],harbors.config['server'],true);
    }
};