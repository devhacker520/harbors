var path = require('path');
var fs = require('fs');
var http = require('http');
var querystring = require('querystring');
var formidable = require("formidable");

var _utils = require('./utils');
var _object = require('./object');
var _sync = require('./sync');

exports.mergeConfig = function(){
    var config = require('../default/config');
    var filePath = path.normalize(config.baseDir + '/config/config');
    if(fs.existsSync(filePath+'.js')){
        config = _utils.merge(config,require(filePath));
    }else{
        console.log('User configuration file not found!');
    }
    return config;
};

exports.mergeVhost = function(config){
    var vhost = {};
    var filePath = path.normalize(config.baseDir + '/config/vhost');
    if(fs.existsSync(filePath+'.js')){
        vhost = _utils.merge(vhost,require(filePath));
    }else{
        vhost= require('../default/vhost');
        vhost = _utils.merge(vhost,require(filePath));
        console.log('User vhost file not found!');
    }
    var $config = _utils.merge({},config);
    delete $config.mysql;
    delete $config.redis;
    delete $config.listenPort;
    delete $config.baseDir;
    delete $config.clusterNum;
    delete $config.vhost;
    if(config.vhost){
        for(var p in vhost){
            vhost[p] = _utils.merge(config,vhost[p]);
        }
    }else{
        vhost = {'*':config};//读取默认配置给'*'主机
    }
    return vhost;
};

exports.createServer = function(config,hostList){
    //引入mysql以及redis模块
    if(config.redis&&config.redis.Use){
        var _redis = require('./redis').init();
    }
    if(config.mysql&&config.mysql.Use){
        var _mysql = require('./mysql').init(config);
    }

    http.createServer(function(req,res){
        if(req.url=='/favicon.ico') return false;
        var vhost = req.headers.host.split(":")[0];

        //获取数据
        _sync('enhance')
            .add(function(callback){//整理cookie数据
                if(!req.headers.cookie)
                    req.cookie = {};
                else{
                    var temp = req.headers.cookie.split(";");
                    var cookie = {};
                    for(var i=0;i<temp.length;i++){
                        var temp_2 = temp[i].split("=");
                        temp_2[0] = temp_2[0].replace(/^\s*/,'');
                        cookie[temp_2[0]] = temp_2[1];
                    }
                    req.cookie = cookie;
                }
                callback();
            })
            .add(function(callback){//获取session
                _redis.get(req.cookie[config.sessionId], function (err, obj) {
                    var t = eval('('+obj+')');
                    if(t==null) t={};
                    req.session = t;
                    callback();
                });
            })
            .add(function(callback){//获取post数据以及文件
                if(req.method=='POST'){
                    //检查文件夹是否存在
                    if(!fs.existsSync(harbors.config.baseDir+'/tmp'))
                        fs.mkdirSync(harbors.config.baseDir+'/tmp');
                    var form = new formidable.IncomingForm();
                    form.uploadDir = harbors.config.baseDir+'/tmp'
                    form.parse(req, function(err, fields, files){
                        req.post = fields;
                        req.files = files;
                        //100秒后删除缓存在tmp的文件
                        for(var p in files){
                            files[p].path&&setTimeout(function(){
                                fs.unlinkSync(files[p].path);
                            },100000);
                        }
                        callback();
                    });
                }else{
                    req.post = {};
                    req.files = {};
                    callback();
                }
            })
            .end(function(){
                res.mysql = _mysql;
                res.redis = _redis;

                var $object = _object(config,hostList[vhost],req,res);

                $object.render('login.jade',{url:{resources:'http://dev.resources.itharbors.com:3000/'}});
            });


    }).listen(config.listenPort);
};