var path = require('path');
var fs = require('fs');
var zlib = require('zlib');

var _mime = require('./mime');

module.exports = function(file){

    var $this = this;
    var __path = path.normalize($this.config.baseDir+'/host/'+$this.vhost.serverDir+'/view/'+file);
    var extname = path.extname(file);

    if(fs.existsSync(__path)){
        var lastModified = fs.statSync(__path).mtime.toUTCString();
        var ifModifiedSince = "If-Modified-Since".toLowerCase();
        $this.res.setHeader("Last-Modified", lastModified);
        if ($this.req.headers[ifModifiedSince] && lastModified == $this.req.headers[ifModifiedSince]) {
            $this['304']();
        } else {
            if ($this.vhost.gzip) {
                __gzip($this,__path,extname);
            }else{
                __normal($this,__path,extname);
            }
        }
    }else{
        $this['404']();
    }

};

var __gzip = function($this,__path,extname){
    var raw = fs.createReadStream(__path);
    var acceptEncoding = $this.req.headers['accept-encoding'] || "";
    var matched = __path.match($this.vhost.gzipFile);
    $this.res.setHeader('Content-Type',_mime[extname] || "text/plain");
    if (matched && acceptEncoding.match(/\bgzip\b/)) {
        $this.res.setHeader('Content-Encoding', 'gzip');
        raw.pipe(zlib.createGzip()).pipe($this.res);
    } else if (matched && acceptEncoding.match(/\bdeflate\b/)) {
        $this.res.setHeader('Content-Encoding', 'deflate');
        raw.pipe(zlib.createDeflate()).pipe($this.res);
    } else {
        raw.pipe($this.res);
    }
};

var __normal = function($this,__path,extname){
    fs.readFile(__path, "binary", function (err, file) {
        if (err) {
            console.log(err);
        } else {//准备返回给客户端文件
            var expires = new Date();
            expires.setTime(expires.getTime() + $this.vhost.staticTime);
            $this.res.setHeader('Content-Length',file.length);
            $this.res.setHeader('Content-Type',_mime[extname] || "text/plain");
            $this.res.setHeader('Cache-Control','max-age=' + $this.vhost.staticTime);
            $this.res.setHeader('Expires',expires.toUTCString());
            $this.res.write(file, "binary");
            $this.res.end();
        }
    });
};