var path = require('path');
var fs = require('fs');
var mime = require('./mime');
var zlib = require('zlib');

//用于返回静态文件
function app(req,res){

    this.display = function(file){//显示静态文件
        var extname = path.extname(file);
        if(!extname){
            extname = path.extname(harbors.config.sraticFile);
            file += harbors.config.sraticFile;
        }
        var vhostFile = harbors.config.vhost ? harbors.vhost[req.vhost]['baseDir'] : '';
        var  realPath = path.normalize(harbors.config.baseDir + '/view/'+vhostFile + '/' + file);
        harbors.config.deBug&&console.log("显示静态文件:"+realPath);
        fs.exists(realPath,function(exists){
            if (!exists) {
                res.writeHead(404, {'Content-Type': 'text/plain'});
                res.end("no found file");
            } else {
                fs.stat(realPath, function (err, stat) {
                    var lastModified = stat.mtime.toUTCString();
                    var ifModifiedSince = "If-Modified-Since".toLowerCase();
                    res.setHeader("Last-Modified", lastModified);

                    if (req.headers[ifModifiedSince] && lastModified == req.headers[ifModifiedSince]) {
                        res.writeHead(304, "Not Modified");
                        res.end();
                    } else {
                        if(harbors.config.gzip){//开启了gzip
                            var raw = fs.createReadStream(realPath);
                            var acceptEncoding = req.headers['accept-encoding'] || "";
                            var matched = realPath.match(harbors.config.gzipFile);
                            if (matched && acceptEncoding.match(/\bgzip\b/)) {
                                res.writeHead(200, "Ok", {
                                    'Content-Encoding': 'gzip'
                                });
                                raw.pipe(zlib.createGzip()).pipe(res);
                            } else if (matched && acceptEncoding.match(/\bdeflate\b/)) {
                                res.writeHead(200, "Ok", {
                                    'Content-Encoding': 'deflate'
                                });
                                raw.pipe(zlib.createDeflate()).pipe(res);
                            } else {
                                res.writeHead(200, "Ok");
                                raw.pipe(res);
                            }
                        }else{//关闭gzip
                            fs.readFile(realPath, "binary", function (err, file) {
                                if (err) {
                                    res.writeHead(500, {'Content-Type': 'text/plain'});
                                    res.end(err);
                                } else {//准备返回给客户端文件
                                    var expires = new Date();
                                    expires.setTime(expires.getTime() + harbors.config.staticTime);
                                    res.writeHead(200, {
                                        'Content-Length': file.length,
                                        'Content-Type':mime[extname]||"text/plain",
                                        'Cache-Control':'max-age=' + harbors.config.staticTime,
                                        "Expires":expires.toUTCString()
                                    });
                                    res.write(file, "binary");
                                    res.end();
                                }
                            });
                        }
                    }

                });

            }
        })
    }
}
/*
var app = {
    init: function (req, res) {
        this.req = req;
        this.res = res;
        return this;
    },
    display: function (file) {//显示静态文件
        var extname = path.extname(file);
        if (!extname) {
            extname = path.extname(harbors.config.sraticFile);
            file += harbors.config.sraticFile;
        }
        var vhostFile = harbors.config.vhost ? harbors.vhost[app.req.vhost]['baseDir'] : '';
        var realPath = path.normalize(harbors.config.baseDir + '/view/' + vhostFile + '/' + file);
        harbors.config.deBug && console.log("显示静态文件:" + realPath);
        fs.exists(realPath, function (exists) {
            if (!exists) {
                app.res.writeHead(404, {'Content-Type': 'text/plain'});
                app.res.end("no found file");
            } else {
                fs.stat(realPath, function (err, stat) {
                    var lastModified = stat.mtime.toUTCString();
                    var ifModifiedSince = "If-Modified-Since".toLowerCase();
                    app.res.setHeader("Last-Modified", lastModified);

                    if (app.req.headers[ifModifiedSince] && lastModified == app.req.headers[ifModifiedSince]) {
                        app.res.writeHead(304, "Not Modified");
                        app.res.end();
                    } else {
                        if (harbors.config.gzip) {//开启了gzip
                            var raw = fs.createReadStream(realPath);
                            var acceptEncoding = app.req.headers['accept-encoding'] || "";
                            var matched = realPath.match(harbors.config.gzipFile);
                            if (matched && acceptEncoding.match(/\bgzip\b/)) {
                                app.res.writeHead(200, "Ok", {
                                    'Content-Encoding': 'gzip'
                                });
                                raw.pipe(zlib.createGzip()).pipe(app.res);
                            } else if (matched && acceptEncoding.match(/\bdeflate\b/)) {
                                app.res.writeHead(200, "Ok", {
                                    'Content-Encoding': 'deflate'
                                });
                                raw.pipe(zlib.createDeflate()).pipe(app.res);
                            } else {
                                app.res.writeHead(200, "Ok");
                                raw.pipe(app.res);
                            }
                        } else {//关闭gzip
                            fs.readFile(realPath, "binary", function (err, file) {
                                if (err) {
                                    app.res.writeHead(500, {'Content-Type': 'text/plain'});
                                    app.res.end(err);
                                } else {//准备返回给客户端文件
                                    var expires = new Date();
                                    expires.setTime(expires.getTime() + harbors.config.staticTime);
                                    app.res.writeHead(200, {
                                        'Content-Length': file.length,
                                        'Content-Type': mime[extname] || "text/plain",
                                        'Cache-Control': 'max-age=' + harbors.config.staticTime,
                                        "Expires": expires.toUTCString()
                                    });
                                    app.res.write(file, "binary");
                                    app.res.end();
                                }
                            });
                        }
                    }

                });

            }
        })
    }
};
*/

module.exports = app;