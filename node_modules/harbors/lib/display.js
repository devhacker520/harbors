var path = require('path');
var mime = require('./mime');
var fs = require('fs');
var zlib = require('zlib');
var response = require('./response');

module.exports = function(file,req,res){
    var extname = path.extname(file);
    if (!extname) {
        extname = path.extname(harbors.config.sraticFile);
        file += harbors.config.sraticFile;
    }
    var realPath = path.normalize(harbors.config.baseDir + '/view/' + file);
    harbors.log("display file:" + realPath);
    fs.stat(realPath, function (err, stat) {
        try{
            var lastModified = stat.mtime.toUTCString();
            var ifModifiedSince = "If-Modified-Since".toLowerCase();
            res.setHeader("Last-Modified", lastModified);

            if (req.headers[ifModifiedSince] && lastModified == req.headers[ifModifiedSince]) {
                response.h304(res);
            } else {
                if (harbors.config.gzip) {//开启了gzip
                    var raw = fs.createReadStream(realPath);
                    var acceptEncoding = req.headers['accept-encoding'] || "";
                    var matched = realPath.match(harbors.config.gzipFile);
                    if (matched && acceptEncoding.match(/\bgzip\b/)) {
                        res.setHeader('Content-Encoding', 'gzip');
                        response.h200(res);
                        raw.pipe(zlib.createGzip()).pipe(res);
                    } else if (matched && acceptEncoding.match(/\bdeflate\b/)) {
                        res.setHeader('Content-Encoding', 'deflate');
                        response.h200(res);
                        raw.pipe(zlib.createDeflate()).pipe(res);
                    } else {
                        response.h200(res);
                        raw.pipe(res);
                    }
                } else {//关闭gzip
                    fs.readFile(realPath, "binary", function (err, file) {
                        if (err) {
                            response.h500(res);
                            harbors.err(err);
                        } else {//准备返回给客户端文件
                            var expires = new Date();
                            expires.setTime(expires.getTime() + harbors.config.staticTime);
                            res.setHeader('Content-Length',file.length);
                            res.setHeader('Content-Type',mime[extname] || "text/plain");
                            res.setHeader('Cache-Control','max-age=' + harbors.config.staticTime);
                            res.setHeader('Expires',expires.toUTCString());
                            response.h200(res);
                            res.write(file, "binary");
                            res.end();
                        }
                    });
                }
            }
        }catch(err){
            harbors.log(err);
            response.h404(res);
        }
    });
};