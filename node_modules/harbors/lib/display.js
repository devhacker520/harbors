var path = require('path');
var mime = require('./mime');
var fs = require('fs');
var zlib = require('zlib');

module.exports = function(file,req,res){
    var extname = path.extname(file);
    if (!extname) {
        extname = path.extname(harbors.config.sraticFile);
        file += harbors.config.sraticFile;
    }
    var realPath = path.normalize(harbors.config.baseDir + '/view/' + file);
    console.log(realPath);
    harbors._dev&&console.log("display file:" + realPath);
    fs.stat(realPath, function (err, stat) {
        try{
            var lastModified = stat.mtime.toUTCString();
            var ifModifiedSince = "If-Modified-Since".toLowerCase();
            res.setHeader("Last-Modified", lastModified);

            if (req.headers[ifModifiedSince] && lastModified == req.headers[ifModifiedSince]) {
                res.writeHead(304, "Not Modified");
                res.end();
            } else {
                if (harbors.config.gzip) {//开启了gzip
                    var raw = fs.createReadStream(realPath);
                    var acceptEncoding = req.headers['accept-encoding'] || "";
                    var matched = realPath.match(harbors.config.gzipFile);
                    if (matched && acceptEncoding.match(/\bgzip\b/)) {
                        res.writeHead(200, "Ok", {
                            'Content-Encoding': 'gzip'
                        });
                        raw.pipe(zlib.createGzip()).pipe(res);
                    } else if (matched && acceptEncoding.match(/\bdeflate\b/)) {
                        res.writeHead(200, "Ok", {
                            'Content-Encoding': 'deflate'
                        });
                        raw.pipe(zlib.createDeflate()).pipe(res);
                    } else {
                        res.writeHead(200, "Ok");
                        raw.pipe(res);
                    }
                } else {//关闭gzip
                    fs.readFile(realPath, "binary", function (err, file) {
                        if (err) {
                            res.writeHead(500, {'Content-Type': 'text/plain'});
                            res.end(err);
                        } else {//准备返回给客户端文件
                            var expires = new Date();
                            expires.setTime(expires.getTime() + harbors.config.staticTime);
                            res.writeHead(200, {
                                'Content-Length': file.length,
                                'Content-Type': mime[extname] || "text/plain",
                                'Cache-Control': 'max-age=' + harbors.config.staticTime,
                                "Expires": expires.toUTCString()
                            });
                            res.write(file, "binary");
                            res.end();
                        }
                    });
                }
            }
        }catch(err){
            res.writeHead(404, {'Content-Type': 'text/plain'});
            res.end("no found file");
        }
    });
};