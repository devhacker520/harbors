/**
 * 文件操作模块
 */
var fs = require('fs');
var path = require('path');

var base = path.join(__dirname, '/../../..');

/**
 * 判断文件存在
 * @param file
 * @returns {*}
 */
exports.exists = function(file){
    return fs.existsSync(file);
};

/**
 * 依次创建指定路径内所有不存在的文件夹
 * @param dir
 */
exports.mkdir = function(dir){
    var _path = [];
    var index = 0;
    while(!exports.exists(dir)&&index<10){
        _path.push(path.basename(dir));
        dir = path.dirname(dir);
        index++;
    }
    while(_path.length>0&&index>0){
        dir = path.join(dir,_path.pop());
        fs.mkdirSync(dir);
        index--;
    }
};

/**
 * 读取文件并转换为字符串
 * @param file
 * @returns {*}
 */
exports.readFile = function(file){
    if(exports.exists(file))
        return fs.readFileSync(file)+'';
    else
        return undefined;
};

/**
 * 读取指定文件夹下的所有文件
 * @param dir
 * @returns {*}
 */
exports.readDir = function(dir){
    if(exports.exists(dir))
        return fs.readdirSync(dir);
    else
        return [];
};

/**
 * 读取指定文件并转换为json数据
 * @param file
 * @returns {*}
 */
exports.readJson = function(file){
    if(exports.exists(file))
        return JSON.parse(fs.readFileSync(file)+'');
    else
        return undefined;
};

/**
 * 写入json格式文件
 * @param path
 * @param object
 */
exports.writeJson = function(path,object){
    fs.writeFile(path,JSON.stringify(object));
};

/**
 * 相对地址转绝对地址
 * （相对安装框架的目录）
 * @param path
 * @returns {*}
 */
exports.path = function(dir){
    if(dir==undefined) return undefined;
    dir = dir.replace(/(\/|\\)$/,'');
    if(/^([a-zA-Z]\:|\/)/.test(dir))
        return dir;
    else
        return path.join(base,dir);
};

/**
 *
 * @param path
 * @param string
 */
exports.writeFile = function(path,string,callback){
    fs.writeFile(path,string,callback||function(){});
};

exports.stat = fs.statSync;
exports.appendFile = fs.appendFile;
exports.unlink = fs.unlink;