var path = require('path');
var fs = require("fs");
var querystring = require('querystring');
var formidable = require("formidable");
var colors = require('colors');

var _display = require('./display');
var _cookie = require('./cookie');
var _State = require('./State');

/**
 * 虚拟主机路由
  * @param config
 * @returns {Array}
 */
exports.extraction = function(config,all){
    if(all.redis&&all.Use){
        var _redis = require('./redis');
    };
    if(all.mysql&&all.mysql.Use){
        var _mysql = require('./mysql');
    };
    var route = [];

    //判断虚拟主机的类型和配置，为其生成封装路由的数组
    if(config.serverType=='static'){
        route.push(function(req,res){
            _display.call({
                vhost:config,
                req:req,
                res:res,
                response:_State
            },req.url);
        });
        return route;
    }

    if(config.serverType=='dynamic'){
        //不需要设置自动封装的类
        route.push(path_);
        route.push(cookie);
        route.push(POST);
        route.push(GET);

        //需要开启设置的类
        if(config.session){
            route.push(session);
        }
        if(config.debug){
            route.push(clearController);
        }

        //最后一个路由
        route.push(filter);
        return route;
    }

    if(config.serverType=='mixed'){
        //不需要设置自动封装的类
        route.push(path_);
        route.push(cookie);
        route.push(POST);
        route.push(GET);

        //需要开启设置的类
        if(config.session){
            route.push(session);
        }
        if(config.debug){
            route.push(clearController);
        }

        //最后一个路由
        route.push(mixed);
        return route;
    }

};

/**
 * 清空控制器缓存
 */
function clearController(req,res,config){
    cache.controller(config);
    res._routeNum++;
    config.route[config.route.length-1](req,res,config);
}

/**
 * 解析session
 */
function session(req,res,config){
    _redis.get(req.cookie[config.sessionId], function (err, obj) {
        var t = eval('('+obj+')');
        if(t==null) t={};
        req.session = t;
        res._routeNum++;
        config.route[config.route.length-1](req,res,config);
    });
}

/**
 * 解析req.url来访路径为数组格式
 * @private
 */
function path_(req,res,config){
    req.path = req.url.split('?')[0].replace(/^\//,'').split('/');
    res._routeNum++;
    config.route[config.route.length-1](req,res,config);
}

/**
 * 解析cookie
 */
function cookie(req,res,config){
    req.cookie = _cookie.cookie(req);
    res._routeNum++;
    config.route[config.route.length-1](req,res,config);
}

/**
 * 设置cookie
 */
function setCookie(req,res,config){
    res.setCookie = function(cookie,path,time,httponly){
        _cookie.setCookie(cookie,time,path,req,res,httponly,config);
    };
    res._routeNum++;
    config.route[config.route.length-1](req,res,config);
}

/**
 * 解析get参数
 * @constructor
 */
function GET(req,res,config){
    var t = req.url.split('?');
    if(t[1]){
        req.get = querystring.parse(t[1]);
    }else{
        req.get = {};
    }
    res._routeNum++;
    config.route[config.route.length-1](req,res,config);
}

/**
 * 解析post参数
 * @constructor
 */
function POST(req,res,config){
    if(req.method=='POST'){
        //检查文件夹是否存在
        if(!fs.existsSync(harbors.config.baseDir+'/tmp'))
            fs.mkdirSync(harbors.config.baseDir+'/tmp');
        var form = new formidable.IncomingForm();
        form.uploadDir = harbors.config.baseDir+'/tmp'
        form.parse(req, function(err, fields, files){
            req.post = fields;
            req.files = files;
            //100秒后删除缓存在tmp的文件
            for(var p in files){
                files[p].path&&setTimeout(function(){
                    fs.unlinkSync(files[p].path);
                },100000);
            }
            res._routeNum++;
            config.route[config.route.length-1](req,res,config);
        });
    }else{
        req.post = {};
        req.files = {};
        res._routeNum++;
        config.route[config.route.length-1](req,res,config);
    }
}

/**
 * 传递控制权限给filter
 */
function filter(req,res,config){
    if(res._routeNum+1>=config.route.length){//自身函数完全完成的判断
        //最后一个路由，转交权限给filter.js
        var controller = path.normalize(harbors.config.baseDir+'/host/'+config.serverDir+'/controller/filter');
        try{
            require(controller)(req,res);
        }catch(err){
            console.log(err);
            response.h404(res);
        }
    }
}

/**
 * 混合模式、先检查静态文件是否存在，在执行控制器方法
 */
function mixed(req,res,config){
    if(res._routeNum+1>=config.route.length){//自身函数完全完成的判断
        var pathT = path.normalize(req.url);
        if(/[\\\/]$/.test(pathT)){
            pathT += config.sraticFile;
        }
        if(fs.existsSync(path.normalize(harbors.config.baseDir+'/host/'+config.serverDir+'/view'+pathT))){
            _display(config.serverDir + '/view/' + pathT,req,res,config);
        }else{
            //最后一个路由，转交权限给filter.js
            var controller = path.normalize(harbors.config.baseDir+'/host/'+config.serverDir+'/controller/filter');
            try{
                require(controller)(req,res);
            }catch(err){
                console.log(err);
                response.h404(res);
            }
        }
    }
}