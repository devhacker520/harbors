var harbors = require('../index');

harbors.Handle = harbors.Class.extend({

    //Default handle function
    _handle: null,
    //Monitoring domain name list
    _domain: null,
    //domain - url cache list
    _cache: null,
    //url rewrite rule
    _rewrite: null,

    /**
     * Initialize the new harbor.Handle object
     *
     * @param {Function} protocol
     */
    ctor: function(handle){
        this._domain = {};
        this._cache = {};
        this._handle = handle;
    },

    //Acquisition processing function
    _getHandle: function(){

        //cache the this(Handle)
        var self = this;
        return function(req, res){

            var _fullHost = req.headers.host;
            //Find cache
            if(self._cache[_fullHost]){
                self._domain[ self._cache[_fullHost] ](req, res);
                return;
            }

            var _execUrl = _fullHost.split(':')[0];

            for(var p in self._domain){
                var _tmp, _urlTemp = _execUrl;

                //Domain name completely equal
                if(p === _urlTemp){
                    self._domain[_urlTemp](req, res);
                    //cache
                    self._cache[_fullHost] = _urlTemp;
                    return;
                }

                //The list of matching domain name
                while(_urlTemp != p && _tmp != _urlTemp){
                    _tmp = _urlTemp;
                    _urlTemp = self._backHost(_urlTemp);
                }

                if(_tmp != _urlTemp){
                    self._domain[_urlTemp](req, res);
                    //cache
                    self._cache[_fullHost] = _urlTemp;
                    return;
                }
            }

            //Host is not Found.
            self._handle(req, res);
        }
    },

    _backHost: function(url){
        return url.replace(/(\*\.\S*?(\.|\:)|\S*?(\.|\:))/,'*$2$3');
    },

    /**
     * Add listen domain
     *
     * @param {String}   name    - Must
     * @param {Function} handle  - Must
     */
    addDomain: function(name, handle){

        if(handle instanceof harbors.Router || handle instanceof harbors.AutoRouter)
            this._domain[name] = handle._route();
        else
            this._domain[name] = handle;
    }
});

/**
 * Creare new harbors.Handle
 * @param handle
 * @returns {harbors.Handle}
 */
harbors.Handle.create = function(handle){

    if(typeof handle !== 'function' && handle){
        harbors.wran('Create handle is error.');
    }else{
        return new harbors.Handle(handle);
    }

};