var harbors = require('../index');

var protocol = {
    http: require('http'),
    https: require('https')
};

harbors.Server = harbors.Class.extend({

    _ip: null,
    _port: null,
    _callback: null,
    _protocol: null,
    _handle: null,

    ctor: function(protocol, ip, port, callback){

        this._protocol = protocol;
        this._ip = ip;
        this._port = port;
        this._callback = callback;

        this.startServer();
    },

    handle: function(handle){
        if(handle instanceof harbors.Handle)
            this._handle = handle;
        else
            throw 'error';
    },

    startServer: function(){
        var self = this;
        if(this._protocol && protocol[this._protocol]){
            var _S = protocol[this._protocol].createServer(function(req, res){
                if(self._handle === null){
                    res.end('Not found the processing function');
                    return;
                }
                self._handle(req, res);
            });

            _S.listen(this._port, this._ip, this._callback);
        }
    }

});

/**
 *
 * @param {String}   protocol  - Must
 * @param {String}   ip        - Optional
 * @param {Number}   port      - Must
 * @param {Function} callback  - Optional
 *
 * @returns {harbors.Server}
 */
harbors.Server.create = function(protocol, ip, port, callback){

    var a, b, c, d;
    a = b = c = d = null;

    for(var p in arguments){
        switch(typeof arguments[p]){
            case 'string':
                a ? b = arguments[p] : a = arguments[p];
                break;
            case 'number':
                c = arguments[p];
                break;
            case 'function':
                d = arguments[p];
                break;
        }
    }

    return new harbors.Server(a, b, c, d);

};