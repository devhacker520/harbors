var harbors = require('../index');

var protocol = {
    http: require('http'),
    https: require('https')
};

harbors.Server = harbors.Class.extend({

    //Listen ip
    _ip: null,
    //Listen port
    _port: null,
    //Listen protocol
    _protocol: null,
    //Acquisition processing program socket after
    _handle: null,

    //Server object
    __server: null,

    /**
     * Initialize the new harbors.Server object
     *
     * @param {String}   protocol  - Must
     * @param {String}   ip        - Optional
     * @param {Number}   port      - Must
     * @param {Function} callback  - Optional
     */
    ctor: function(protocol, ip, port, handle){

        this._protocol = protocol;
        this._ip = ip;
        this._port = port;
        this._handle = handle;

        this.startServer();
    },

    /**
     * The incoming processing function
     *
     * @param {harbors.Handle} handle - Must
     */
    setHandle: function(handle){
        if(handle instanceof harbors.Handle)
            this._handle = handle;
        else
            this._handle = function(req, res){

                harbors.wran('Not found the handle.');
                res.end('Not found the handle.');
            };
    },

    /**
     * According to the preset parameters of open service server
     */
    startServer: function(){
        var self = this;
        if(self._protocol && protocol[self._protocol]){

            self.__server = protocol[self._protocol]
                .createServer(function(req, res){

                    if(self._handle === null){

                        harbors.wran('Not found the processing function.');
                        res.end('Not found the processing function');

                        return;
                    }
                    self._handle.handle.call(self._handle, req, res);
                });

            self.__server.listen(
                self._port,
                self._ip,
                self._callback
            );

        }else{

            harbors.wran('Create a server not found');
        }

    },

    /**
     * Close this server
     */
    close: function(){
        harbors.error('This feature is not ready.');
    }

});

/**
 * Initialize the new server object
 *
 * @param {String}   protocol  - Must
 * @param {String}   ip        - Optional
 * @param {Number}   port      - Must
 * @param {Function} callback  - Optional
 *
 * @returns {harbors.Server}
 */
harbors.Server.create = function(protocol, ip, port, handle){

    var a, b, c, d;
    a = b = c = d = null;

    for(var p in arguments){
        switch(typeof arguments[p]){
            case 'string':
                a ? b = arguments[p] : a = arguments[p];
                break;
            case 'number':
                c = arguments[p];
                break;
            case 'object':
                if(arguments[p] instanceof harbors.Handle);
                    d = arguments[p];
                break;
        }
    }

    return new harbors.Server(a, b, c, d);

};