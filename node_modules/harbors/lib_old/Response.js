/**
 * Response需要封装的对象方法
 */
var path = require('path');
var mime = require('./Mime');
var fs = require('fs');
var zlib = require('zlib');
var jade = require('jade');
var cluster = require('cluster');
var Session = require('./Session');

/**
 * 显示静态文件的函数
 *
 * @param {string} file
 * @param {object} req
 * @param {object} res
 */
exports.display = function(file,req,res){
    var extname = path.extname(file);
    if (!extname) {
        extname = path.extname(harbors.config.sraticFile);
        file += harbors.config.sraticFile;
    }
    var realPath = path.normalize(harbors.config.baseDir + '/view/' + file);
    harbors._dev&&console.log("display file:" + realPath);
    fs.stat(realPath, function (err, stat) {
        try{
            var lastModified = stat.mtime.toUTCString();
            var ifModifiedSince = "If-Modified-Since".toLowerCase();
            res.setHeader("Last-Modified", lastModified);

            if (req.headers[ifModifiedSince] && lastModified == req.headers[ifModifiedSince]) {
                res.writeHead(304, "Not Modified");
                res.end();
            } else {
                if (harbors.config.gzip) {//开启了gzip
                    var raw = fs.createReadStream(realPath);
                    var acceptEncoding = req.headers['accept-encoding'] || "";
                    var matched = realPath.match(harbors.config.gzipFile);
                    if (matched && acceptEncoding.match(/\bgzip\b/)) {
                        res.writeHead(200, "Ok", {
                            'Content-Encoding': 'gzip'
                        });
                        raw.pipe(zlib.createGzip()).pipe(res);
                    } else if (matched && acceptEncoding.match(/\bdeflate\b/)) {
                        res.writeHead(200, "Ok", {
                            'Content-Encoding': 'deflate'
                        });
                        raw.pipe(zlib.createDeflate()).pipe(res);
                    } else {
                        res.writeHead(200, "Ok");
                        raw.pipe(res);
                    }
                } else {//关闭gzip
                    fs.readFile(realPath, "binary", function (err, file) {
                        if (err) {
                            res.writeHead(500, {'Content-Type': 'text/plain'});
                            res.end(err);
                        } else {//准备返回给客户端文件
                            var expires = new Date();
                            expires.setTime(expires.getTime() + harbors.config.staticTime);
                            res.writeHead(200, {
                                'Content-Length': file.length,
                                'Content-Type': mime[extname] || "text/plain",
                                'Cache-Control': 'max-age=' + harbors.config.staticTime,
                                "Expires": expires.toUTCString()
                            });
                            res.write(file, "binary");
                            res.end();
                        }
                    });
                }
            }
        }catch(err){
            res.writeHead(404, {'Content-Type': 'text/plain'});
            res.end("no found file");
        }
    });

};

/**
 * 动态jade模板渲染函数
 *
 * @param {string} file
 * @param {object} req
 * @param {object} res
 */
exports.render = function(file,obj,req,res){
    var realFile = path.normalize(harbors.config.baseDir+'/view/'+file);
    //调试流程
    harbors._dev&&console.log("jade template:"+realFile);
    if(!req.headers['if-modified-since']||((new Date()-0)-(new Date(req.headers['if-modified-since'])-0)>harbors.config.jadeTime)){
        //超出缓存时间
        jade.renderFile(realFile, obj||{}, function (err, html) {
            if (err) {
                res.writeHead(500, {'Content-Type': 'text/plain'});
                res.end("file is lost");
                console.log(err);
            }
            var lastModified = new Date().toUTCString();
            res.setHeader("Last-Modified", lastModified);
            res.writeHead(200, {'Content-Type': "text/html"});
            res.write(html, "binary");
            res.end();
        });
    }else{
        //还在jade缓存时间内
        res.writeHead(304, "Not Modified");
        res.end();
    }
};

/**
 * 设置cookie
 *
 * @param {object} cookie
 * @param {number} time
 * @param {string} path
 * @param {object} req
 * @param {object} res
 */
exports.setCookie = function(cookie,time,path,req,res){
    var result = [];
    for(var p in cookie){
        if(time||time==0){
            result.push(p+"="+cookie[p]+";expires="+new Date(new Date()-0+time)+";path="+path+";");
        }else{
            result.push(p+"="+cookie[p]+";path="+path+";");
        }
    }

    harbors._dev&&console.log('setCookie:'+result);
    res.setHeader("Set-Cookie", result);
};

/**
 * 设置session
 *
 * @param session
 * @param time
 * @param req
 * @param res
 */
exports.setSession = function(session,req,res){
    if(!req.Cookie[harbors.config.sessionId]){
        var cookieName = harbors.Utils.uid(20);
        var s = {};
        s[harbors['config']['sessionId']] = cookieName;
        res.setCookie(s);
    }else{
        var cookieName = req.Cookie[harbors.config.sessionId];
    }
    Session.setSession(cookieName,session);
};

exports.delSession = function(session,req,res){
    if(req.Cookie[harbors.config.sessionId]){
        var cookieName = req.Cookie[harbors.config.sessionId];
        Session.delSession(cookieName,session,req,res)
    }
};