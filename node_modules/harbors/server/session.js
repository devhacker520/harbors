var path = require('path');

var __fs__ = require('../lib/file');

/**
 * 读取session
 *   file：判断文件存在，读取，然后判断过期时间与ip地址正确定，过期则删除session文件
 * @param request
 * @param next
 * @returns {undefined}
 */
exports.analysis = function(request,next){
    harbors.log("开始解析session...");

    //解析cookie
    request._headers.cookie ?
        (function(){
            if(!request._headers.cookie){
                harbors.log("session文件不存在...");
                return {};
            }
            var temp = request._headers.cookie.split(";");
            var cookie = {};
            for(var i=0;i<temp.length;i++){
                var temp_2 = temp[i].split("=");
                temp_2[0] = temp_2[0].replace(/^\s*/,'');
                cookie[temp_2[0]] = temp_2[1];
            }
            request.param.cookie = cookie;
        })() :
        request.param.cookie = {};

    //判断是否需要解析session
    if(request.config.session=='false'){
        request._session = {};
        next();
        return undefined;
    }

    var sId = request.cookie(request.config.session_id);
    if(!sId){
        request._session = {};
        next();
        return undefined;
    }

    var pathDir = path.join(request.config.tmp_dir,'./session/');

    var file = path.join(pathDir,sId);

    var session = __fs__.readJson(file);

    if(!session){
        request._session = {};
        next();
        return;
    }
    if(session.time-0>new Date()-0){//未过期
        if(session.ip==request._ip)
            request._session = session.data;
        else
            request._session = {};
    }else{//过期，删除
        __fs__.unlink(file);
        request._session = {};
    }
    next();
};

/**
 * 设置session
 *     存储在临时文件夹下，为每一个session创建一个对应的json文件
 *     json => {
 *       ip:创建此session的ip地址（绑定ip防止cookie冒充）
 *       time:此session的过期时间戳
 *       data:session主要内容
 *     }
 * @param arg
 * @param self
 */
exports.set = function(self){
    if(self.config==undefined) return false;
    harbors.log("开始设置session...");
    var pathDir = path.join(self.config.tmp_dir,'./session/');
    harbors.log(pathDir);
    //检查文件夹
    if(self._sCookie){
        __fs__.mkdir(pathDir);
        __fs__.writeJson(path.join(pathDir,self._sCookie),{
            ip:self._ip,
            time:(new Date()-0)+parseInt(self.config.session_survavil),
            data:self._session_
        });
    }

};

/**
 * 检查session文件是否超时，超时则删除文件
 */
exports.checkSession = function(){
    console.log(harbors.config)
};