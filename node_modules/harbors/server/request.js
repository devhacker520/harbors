var _path_ = require('./path');
var _session_ = require('./session');
var __mime__ = require('../lib/mime');
var path = require('path');
var fs = require('fs');
var zlib = require('zlib');
module.exports = function(req,res){
    return new request(req,res);
};

var request = function(req,res){
    harbors.log('开始封装request对象...');

    this.request = req;
    this.response = res;

    this._headers_ = {Server:harbors.Server};//缓存头信息
    this._session_ = {};//缓存session信息
    this._cookie_ = [];//缓存cookie信息
    this._statusCode_ = 200;//缓存头状态

    this.param = {cookie:{},post:{}};//缓存各种接收参数

    this.config = _path_.vhost.call(this);
    //console.log(this.config);
    this.path = _path_.path.call(this);
    //console.log(this.path);

    //载入自定义外部模块
    for(var p in harbors._module){
        this[p] = harbors._module[p];
    }
};

request.prototype = {
    constructor:request,

    get _headers(){ return this.request.headers; },
    get _ip(){ return this.request.connection.remoteAddress; },
    get _host(){ return this.request.headers.host; },
    get _url(){ return this.request.url; },
    get _method(){ return this.request.method; },

    set _headers(obj){ for(var p in obj) this._headers_[p] = obj[p]; },
    set _cookie(string){ this._cookie_.push(string); },
    set _session(obj) { for(var p in obj) this._session_[p] = obj[p]; },
    set _statusCode(num){ this._statusCode_ = num; }
};

request.prototype.send = function(string){
    harbors.log('执行send方法...');
    _session_.set(this);//写入session
    this._headers_['Set-Cookie'] = this._cookie_;
    if(string==undefined){
        this._headers = {"Content-Length":0};
        this.response.writeHeader(this._statusCode_,this._headers_);
        this.response.end();
        return undefined;
    }
    var result = new Buffer(string);
    this._headers = {"Content-Length":result.length};
    this.response.writeHeader(this._statusCode_,this._headers_);
    this.response.end(string);
};

request.prototype.error = function(){
    harbors.log('执行error方法...');
    this._statusCode = 500;
    this.send('error 500');
};

request.prototype.notFound = function(){
    harbors.log('执行notFound方法...');
    this._statusCode = 404;
    this.send('error 404');
};

request.prototype.display = function(file,staticM){
    harbors.log('执行display方法...');
    try{
        var realFile = path.join(this.config.dir,file);

        if(staticM){
            var stat = fs.statSync(realFile);
            if(!stat) throw new Error(realFile+': stat is undefined');
            var lastModified = stat.mtime.toUTCString();
            var ifModifiedSince = "If-Modified-Since".toLowerCase();
            this._headers = {"Last-Modified":lastModified};
            this._headers = {"Content-Type":__mime__[path.extname(realFile)]};
            var expires = new Date();
            expires.setTime(expires.getTime() + (this.config.expires-0));
            this._headers = {"Cache-Control":'max-age=' + this.config.expires,'Expires':expires.toUTCString()};
            if (this._headers[ifModifiedSince] && lastModified == this._headers[ifModifiedSince]) {
                this._statusCode = 304;
                this.send();
                return undefined;
            }
        }
        if(this.config.gzip!='false'){
            var raw = fs.createReadStream(realFile);
            var acceptEncoding = this._headers['accept-encoding'] || "";
            var matched = new RegExp('('+this.config.gzip_file+')').test(realFile);
            if (matched && acceptEncoding.match(/\bgzip\b/)) {
                this._headers = {"Content-Encoding":"gzip"};
                this.send(raw.pipe(zlib.createGzip()));
            } else if (matched && acceptEncoding.match(/\bdeflate\b/)) {
                this._headers = {"Content-Encoding":"deflate"};
                this.send(raw.pipe(zlib.createDeflate()));
            } else {
                this.send(raw);
            }
        }else{
            this._statusCode = 200;
            var html = fs.readFileSync(realFile);
            this.send(html);
        }
    }catch(err){
        console.log(err);
        this.notFound();
    }
};

request.prototype.cookie = function(a,b,c){
    harbors.log('执行cookie方法...');
    var self = this;
    switch(arguments.length){
        case 0:
            return self.param.cookie;
            break;
        case 1:
            if(typeof(arguments[0]) == 'string')
                return self.param.cookie[arguments[0]];
            break;
        default:
            if(typeof(arguments[0]) == 'string' && typeof(arguments[1]) == 'string'){
                var op = '';
                if(typeof(arguments[2]) == 'object'){
                    arguments[2].expires && (op += "expires="+new Date(new Date()-0+arguments[2].expires)+";");
                    arguments[2].path && (op += "path="+(arguments[2].path||'/')+";");
                    arguments[2].httpOnly && (op += "httponly;");
                }
                this._cookie = arguments[0]+'='+arguments[1]+';'+op;
            }
            break;
    }
};

request.prototype.session = function(){
    harbors.log('执行session方法...');
    var self = this;
    if(self.config.session=='false'){
        return {};
    }
    var sID = self.config.session_id;
    self._sCookie = self._sCookie||self.cookie(sID);

    var newCookie = function(){
        return harbors.utils.uid(25);
    };

    //判断cookie标记是否存在
    if(self._sCookie==undefined){
        self._sCookie = newCookie();
        self.cookie(sID,self._sCookie);
    }
    switch(arguments.length){
        case 0://获取所有session
            return self._session_;
            break;
        case 1://获取单条session
            if(typeof(arguments[0])!='string') return;
            return self._session_[arguments[0]];
            break;
        default://添加session
            if(typeof(arguments[0])!='string'&&typeof(arguments[1])!='string') return;
            var t = {};
            t[arguments[0]] = arguments[1];
            self._session = t;
            break;
    }


};

request.prototype.route = function(num){
    if(num==undefined) return this.path.route;
    if(typeof(num-0)!='number') return undefined;
    return this.path.route[num];
};

request.prototype.get = function(){
    var self = this;
    switch(arguments.length){
        case 0://获取所有
            return self.path.get;
            break;
        case 1://获取单条session
            if(typeof(arguments[0])!='string') return;
            return self.path.get[arguments[0]];
            break;
    }
};

request.prototype.post = function(){
    var self = this;
    self._post == undefined && (self._post={});
    switch(arguments.length){
        case 0://获取所有
            return self._post;
            break;
        case 1://获取单条session
            if(typeof(arguments[0])!='string') return;
            return self._post[arguments[0]];
            break;
    }
};

request.prototype.redirect = function(location){
    this._headers = {'Location':location};
    this._statusCode = 302;
    this.send();
};

request.prototype.sync = require('../lib/sync');