/**
 * 服务器进程集群
 */
var http = require('http');
var cluster = require('cluster');
var Request = require('../lib/Request');
var ServerType = require('../lib/ServerType');

/**
 * 创建子进程
 */
var createWorker = function(){//创建工作进程
    var cp = cluster.fork({harbors:{_dev:true}});
    harbors._dev&&console.log('The promoter of new process. clusterid:'+cp.workerID+'. pid:'+cp.process.pid);
    cp.send({dev:true});
    cp.on('exit', function(code, signal) {
        harbors._dev&&console.log('The child process an unexpected error. Code:'+code+'.');
        //重启worker（此时进程id会增加1，以示和原错误关闭进程区别）
        harbors._dev&&console.log('Separation of new sub process process...');
        createWorker();
    });
};

/**
 * 启动、分发集群任务
 */
if (cluster.isMaster) {

    //新建session对象(子进程中没有这个对象，所有session请求必须发送给主进程处理)
    harbors.session = {};

    harbors._dev&&console.log('harbors Service process started,Listening port:'+harbors.config.listenPort+'.Open the process number:'+harbors.config.clusterNum);
    for(var i=0;i<harbors.config.clusterNum;i++){
        createWorker();
    }
} else if (cluster.isWorker) {

    process.on('message',function(a){
        a=='dev'&&(harbors._dev=true);
    });

    http.createServer(function(req,res){
        harbors._dev&&console.log('The child process to accept the request ID: #' + cluster.worker.id);

        req.vhost = Request.vhost(req,res);

        if(!req.vhost.type){
            res.end('404');
        }else{
            ServerType[req.vhost.type](req,res);
        }

    }).listen(harbors.config.listenPort);
}
