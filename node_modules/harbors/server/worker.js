var http = require('http');
var path = require('path');
var _request_ = require('./request');
var _module_ = require('./module');
var __file__ = require('../lib/file');

exports.createServer = function(config){
    if(typeof(config.server.listen)=='string'){
        config.server.listen = [config.server.listen];
    }
    for(var i=0;i<config.server.listen.length;i++){
        http.createServer(function(req,res){
            exports.request(req,res);
        }).listen(config.server.listen[i]);
        harbors.log('子进程开始监听端口：'+config.server.listen[i]);
    }
};

exports.request = function(req,res){
    harbors.log('收到客户端请求...');
    var r = _request_(req,res);
    if(r.config==undefined){
        r.notFound();
        return undefined;
    }
    var staticM;
    var t = r.sync('normal');

    if(/\/$/.test(r.path.url)){//以/结尾
        var default_file = r.config.default_file;
        if(typeof(default_file)=='string')
            default_file = [default_file];
        default_file.map(function(a){
            t.add(function(next){
                var realFile = path.join(r.config.dir,a);
                if(__file__.exists(realFile)){
                    harbors.log(realFile+'文件存在')
                    staticM = a;
                }
                next();
            });
        });
    }else{//不以/结尾
        t.add(function(next){
            staticM = r.path.url;
            next();
        });
    }


    t.end(function(){
        if(staticM==undefined){
            r.notFound();
            return undefined;
        }
        var zz = new RegExp(r.config.nodejs+'$');
        if(zz.test(staticM)){
            harbors.log('使用nodejs解析...');
            _module_['nodejs'](staticM,r);
            return undefined;
        }

        zz = new RegExp(r.config.php+'$');
        if(zz.test(staticM)){
            harbors.log('使用php解析...')
            _module_['php'](staticM,r);
            return undefined;
        }
        //都不存在，输出文件
        console.log(staticM)
        r.display(staticM);
    });


};