var cluster = require('cluster');
var http = require('http');
var routeArray = require('../lib/routeArray');

//创建服务对象
exports.createServer = function(){
    http.createServer(function(req,res){
        console.log(' ');
        harbors.log('The child process to accept the request ID: #' + cluster.worker.id);

        //请求后判断虚拟主机，从route数组第一个函数开始执行
        try{
            var vhost = req.headers.host.split(":")[0];
            harbors.log('vhost : '+vhost);
            if(harbors.vhost[vhost]){
                harbors.vhost[vhost].route[0](harbors.vhost[vhost].route,0,req,res,harbors.vhost[vhost])
            }else{
                if(harbors.vhost['*'])//找默认虚拟主机，如果没有的抛出错误
                    harbors.vhost['*'].route[0](harbors.vhost['*'].route,0,req,res,harbors.vhost['*']);
                else
                    res.end('444');
            }
        }catch(err){
            harbors.log(err);
        }
    }).listen(harbors.config.listenPort);
};

//合并虚拟主机配置
exports.mergeVhost = function(){
    var config = harbors.config;
    if(harbors.config.vhost){
        for(var p in harbors.vhost){
            harbors.vhost[p] = harbors.utils.merge(config,harbors.vhost[p]);
        }
    }else{
        harbors.vhost = {'*':config};//虚拟主机功能未开启、读取默认配置给'*'主机
    }
};

//生成虚拟主机路由数组
exports.createRoute = function(){
    for(var p in harbors.vhost){
        harbors.vhost[p]['route'] = routeArray.extraction(harbors.vhost[p]);
    }
};