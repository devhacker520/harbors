{
  "name": "harbors",
  "version": "0.3.0",
  "description": "Rapid nodejs server",
  "main": "index.js",
  "scripts": {
    "test": "harbors test",
    "start": "node index.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/devhacker520/harbors.git"
  },
  "keywords": [
    "frame"
  ],
  "author": {
    "name": "WangSijie"
  },
  "license": "BSD-2-Clause",
  "bugs": {
    "url": "https://github.com/devhacker520/harbors/issues"
  },
  "dependencies": {
    "mysql": "2.0.0-alpha9",
    "jade": "0.35.0",
    "redis": "0.9.0",
    "colors":"0.6.2",
    "formidable":"1.0.14"
  },
  "_id": "harbors@0.3.0",
  "_from": "harbors@",
  "readme": "harbors ![build status](https://secure.travis-ci.org/coreyti/showdown.png)\r\n=======\r\n\r\n一款轻量级的web服务器框架 v0.2.0\r\n\r\n\r\n  欢迎提交各种bug、建议到邮箱：devhacker520@gmail.com\r\n\r\n  大家的意见以及大家的鼓励，将成为开发的动力。\r\n\r\n\r\n安装方法：\r\n\r\n    npm install harbors\r\n\r\n开启session功能需要redis支持\r\n\r\nnode start.js会自动调用harbors，服务器会自动处理路由关系，后续版本将增加手动路由表功能。\r\n\r\n\r\n\r\n##运行模式\r\n\r\nharbors支持两种模式的服务器状态：\r\n\r\n1、'dynamic'：动态解析模式。\r\n\r\n2、'static'：静态文件服务器模式。\r\n\r\n\r\n'dynamic'模式下harbors处理完数据会在controller目录下寻找filter.js过滤器。并传递给req，res两个参数。语法和原生nodejs一致。（api见下）\r\n\r\n'static'是处理静态文件请求服务的模式。收到浏览器请求后，会在view文件夹下自动寻找请求的文件，存在则返回给浏览器。\r\n\r\n##vhost虚拟主机\r\n\r\nharbors支持apache的vhost类似功能。具体配置在config/config.js中开启。vhost设置在config/vhost.js文件中。\r\n\r\n支持单独配置每个虚拟主机的运行模式、以及服务器缓存等等。\r\n\r\n需要注意的是，如果在config.js中开启了vhost，则不管是'dynamic'还是'static'模式都会在目录下寻找自己的主机目录。\r\n\r\n如原目录：controller/default/filter.js\r\n\r\n开启vhost后：controller/vhost.baseDir/filter.js\r\n\r\n\r\n\r\n##API\r\n\r\n###request\r\n\r\n  >**request.cookie**\r\n  >\r\n  >cookie对象封装，格式{cookieName:cookieValue}\r\n  >\r\n  >**request.session**\r\n  >\r\n  >session对象封装（需要在config.js开启session功能，会轻微影响服务器性能）格式同cookie。\r\n  >\r\n  >开启session的同时会生成一个cookie，名字可以在config.js设置。session下的update一般情况请勿操作。服务器会自行判断更新该值。\r\n  >\r\n  >**request.path**\r\n  >\r\n  >路由路径封装。浏览器地址http://xxx.com/admin/index/index.html 返回 ['admin','index','index.html']\r\n\r\n\r\n###response\r\n\r\n  >**response.setCookie(obj,expires,path)**\r\n  >\r\n  >obj=>传入的cookie，expires=>过期时间,等于0时删除填入的cookie，path=>cookie存储path\r\n  >\r\n  >设置cookie函数，传入参数{cookieName:cookieValue}\r\n  >\r\n  >删除cookie函数，传入参数{cookieName:cookieValue}（必须要完全对应）\r\n  >\r\n  >**response.setSession(obj,expires)**\r\n  >\r\n  >obj=>传入的session，expires=>过期时间,等于0时删除填入的session\r\n  >\r\n  >设置、删除session函数，传入参数{sessionName:sessionValue}\r\n  >\r\n  >**response.display(file)**\r\n  >\r\n  >返回静态文件。传入file地址。未开启vhost的情况在view/default目录下寻找，如显示view/default/index.html => response.display('index.html');\r\n  >\r\n  >如果开启了vhost，则会在view目录后面自动跟上vhost目录。如：view/admin/index.html\r\n  >\r\n  >**response.render(file,param)**\r\n  >\r\n  >传入file地址。和file方法一样，不过render渲染的是jade模板，传入jade模板文件，第二个参数为传入参数。\r\n\r\n##Database\r\n\r\n###mysql\r\n\r\n在config开启mysql后，可以在任何地方使用harbors.mysql调用。\r\n\r\n  >**harbors.mysql(sql,callback)**\r\n\r\n###redis\r\n\r\n在config开启redis后，可以在任何地方使用harbors.redis调用。\r\n\r\n  >**harbors.redis.xxx**\r\n  >\r\n  >文档完善中\r\n\r\n",
  "readmeFilename": "README.md",
  "dist": {
    "shasum": "bfc8335195c4760369da3094c7d88f91836f6f00"
  },
  "_resolved": "https://registry.npmjs.org/harbors/-/harbors-0.3.0.tgz"
}
