var harbors = require('./harbors');

var cluster = require('cluster');
var http = require('http');
var fs = require('fs');
var path = require('path');

var _setting = require('./setting');
var _utils = require('./utils');
var _handle = require('./handle');
var _php = require('./php/handle');
var _nodejs = require('./nodejs/handle');
var _admin = require('./admin');

/**
 * 守护进程
 * @constructor
 */
exports.masterCreateWorker = function(){

    //创建业务进程的方法
    var worker = cluster.fork();
    worker.on('exit', function(code, signal) {
        //重启worker（此时进程id会增加1，以示和原错误关闭进程区别）
        harbors.log("suicide : ", worker.suicide);
        if(worker.suicide){
            harbors.log('Separation of new sub process process...');
            setTimeout(exports.masterCreateWorker,2000)
        }
    });

    //将配置分发给子进程
    worker.process.send({
        type:'init',
        _config:harbors._config,
        _listen:harbors._listen,
        _vhost:harbors._vhost
    });
};
exports.MASTERPROCESS = function(){

    var num = harbors._config.process;

    //合并虚拟主机和server的配置
    _setting.mergeVhost();

    //提取需要监听的端口
    _setting.extractionListen();

    harbors.log('HARBORS child_process num is ', num);

    for(var i=0;i<num;i++){
        exports.masterCreateWorker();
    }

    _admin.createServer();

};

/**
 * 业务进程
 * @constructor
 */
exports.WORKERPROCESS = function(){

    process.on('message', function(msg) {

        if(typeof(msg)!="object"){
            return void 0;
        }
        if(msg.type === "init"){

            harbors.log("worker initing...");

            harbors._config = msg._config;
            harbors._vhost = msg._vhost;
            harbors._listen = msg._listen;

            //创建服务器对象，并且监听提取的端口与ip
            exports.createServer();
        }

    });

};

/**
 * 。创建服务对象
 */
exports.createServer = function(){

    harbors.log("Create server...");
    harbors._listen.forEach(function(listenItem){
        var domainList = {};//基于域名的虚拟主机域名缓存列表
        //监听队列中虚拟主机数量大于1，则handle函数中增加虚拟主机匹配方法
        if(listenItem.vhostNum.length>1){
            var handle = function(req, res){
                harbors.log("");
                harbors.log("reponse url : ", req.url);

                //判断缓存
                if(domainList[req.headers.host] != void 0){
                    var vhostNum = domainList[req.headers.host];
                    harbors.log("Host cache : ",req.headers.host);
                    harbors.log("Host num is ", vhostNum, "!");
                    exports.request(req, res, vhostNum);
                    return void 0;
                }

                var vhost = req.headers.host ? req.headers.host.split(':')[0] : '';
                var vhost_tmp = vhost;
                var index = 0;
                var result = undefined;
                //逐个匹配虚拟主机
                do{
                    vhost = vhost_tmp;
                    listenItem.vhostNum.forEach(function(b){
                        if(harbors._vhost[b]['domain'] == vhost_tmp){
                            index = 10;
                            result = b;
                        }
                    });
                    vhost_tmp = _utils.vhostBack(vhost_tmp);
                }while(vhost_tmp != vhost && index++<10 && vhost != vhost_tmp);
                //与来路匹配的虚拟主机存在
                if(harbors._vhost[result]){
                    harbors.log("Match host : ",vhost_tmp);
                    harbors.log("Host num is ", result, "!");
                    //缓存在虚拟主机列表内
                    domainList[req.headers.host] = result;
                    exports.request(req, res, result);
                    return undefined;
                }
                //没有匹配到虚拟主机的情况
                exports.request(req, res);
            }
        }else{
            var handle = function(req, res){
                harbors.log("");
                harbors.log("reponse url : ", req.url);
                //console.log(req.headers.host)
                //console.log(req.connection.remoteAddress)
                exports.request(req, res, listenItem.vhostNum[0]);
            }
        }
        //创建服务对象
        if(listenItem.ip){
            harbors.log("Listen ", listenItem.ip, " ", listenItem.listen, " vhost num : ", listenItem.vhostNum);
            var ser = http.createServer(handle);
            ser.listen(parseInt(listenItem.listen), listenItem.ip);
        }else{
            harbors.log("Listen ", listenItem.listen, " vhost num : ", listenItem.vhostNum);
            var ser = http.createServer(handle);
            ser.listen(parseInt(listenItem.listen));
        }
    });

};

exports.request = function(req, res, vhostNum){

    var config = harbors._vhost[vhostNum];
    //封装服务器对象
    var object = _handle(req, res, config || harbors._config);
    object._header['Server'] = harbors.SERVER;
    object._num = vhostNum;

    //没有匹配到虚拟主机的情况
    if(config == void 0){
        object.notFound();
        return void 0;
    }

    //如果访问的是网站的图标文件
    if(object._path.pathname=="/favicon.ico"){
        object.display("favicon.ico");
        return void 0;
    }

    //执行重写模块
    if(object._config._module >> 3 & 0x1){

        var _rewrite = config['rewrite']['name'];
        //判断有木有该重写模块在缓存内
        _rewrite = harbors._rewrite[_rewrite];
        if(_rewrite){//存在,返回重写后的地址
            var _result = _rewrite(object._path.pathname);
            object._path.rewrite = _result;
            harbors.log("Rewrite url : ", _result);
        }
    }

    var realFile = object._path.rewrite || object._path.pathname;
    var AbFile = path.join(object._config.dir, realFile);
    if(/\/$/.test(realFile)){
        realFile = void 0;
        //判断真正需要返回的文件路径
        var defaultFile = object._config.default_file;
        var i = 0;
        do{
            var fileTmp = path.join( AbFile, defaultFile[i]);
            //harbors.log("Testing : ", fileTmp);
            if(fs.existsSync(fileTmp)){
                realFile = fileTmp;
                break;
            }
        }while( ++i < defaultFile.length );
    }else{
        realFile = void 0;
        if(fs.existsSync(AbFile)){
            realFile = AbFile;
        }
    }

    if(realFile){//文件存在
        harbors.log("Match file : ", realFile);
        //检测动态语言支持
        exports.module(object, realFile);
        //object.display(fileTmp, true);
    }else{//文件不存在
        harbors.log("Match file : not found!");
        object.notFound();
    }
};

exports.module = function(object, fileTmp){

    //nodejs模块是否开启
    if(object._config._module >> 4 & 0x1){
        if(new RegExp(object._config.nodejs.extname+"$").test(fileTmp)){
            //匹配成功
            harbors.log("Modular type : nodejs!");
            _nodejs(object, fileTmp);
            return void 0;
        }
    }
    //php模块是否开启
    if(object._config._module >> 5 & 0x1){
        if(new RegExp(object._config.php.extname+"$").test(fileTmp)){
            //匹配成功
            harbors.log("Modular type : php!");
            _php(object, fileTmp);
            return void 0;
        }
    }

    harbors.log("Modular type : static file!");
    object.display(fileTmp, true);
};