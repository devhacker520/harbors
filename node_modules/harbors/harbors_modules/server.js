var harbors = require('./harbors');
/**
 * TODO :
 * ini配置文件的读取方法以及格式定义
 */

//合并虚拟主机配置文件
exports.mergeConfig = function(){
    !harbors._config.server.vhost.on && //判断虚拟主机开关是否开启
        ( harbors._config.vhost = [{}] );
    harbors._config.vhost.forEach(function(a){
        harbors.$utils.mergeAll(a, harbors._config.server, true);
        //根据配置增加支持模块
        a.nodejs && a.nodejs.on && ( a.support.push("nodejs") );
        a.php && a.php.on && ( a.support.push("php") );
    });
    //console.log(harbors._config)
};

//提取监听端口号
//Extraction of listening ports
exports.listen = function(){
    harbors._config.vhost.forEach(function(a, i){
        //循环虚拟主机列表
        a.listen.forEach(function(b){
            //循环端口将自身push进需要监听的数组
            var check = true;
            harbors._listen.forEach(function(c){
                //循环之前的监听对象，判断是否在同一个监听对象内
                if(c.ip == a.ip && c.listen == b){
                    c.num.push(i);
                    check = false;
                }
            });
            check && harbors._listen.push({ip: a.ip, listen: b, num: [i]});

        });
    });
    harbors.log('Create server listen...');
    //console.log(harbors._listen);
};

//创建服务对象以及监听上一步提取的所有端口与ip
//Create a service object and monitor a step from all ports and IP
exports.createServer = function(){
    harbors._listen.forEach(function(a){
        var _vhost = {};//域名区分的虚拟主机缓存列表
        var handle = function(req, res){
            harbors.log("");
            harbors.$server.handle(req, res, a.num[0]);
        };
        if(a.num.length>1){
            //如果这个监听队列里不止1个对象，则重写handle，逐个匹配域名
            handle = function(req, res){
                harbors.log("");

                if(_vhost[req.headers.host]!=undefined){
                    //缓存列表里有匹配的主机存在
                    harbors.log("Host is cache! Num is ", _vhost[req.headers.host]);
                    harbors.$server.handle(req, res, _vhost[req.headers.host]);
                    return undefined;
                }

                var vhost = req.headers.host.split(':')[0];
                var vhost_tmp = vhost;
                var index = 0;
                var result = undefined;
                //逐个匹配虚拟主机
                do{
                    harbors.log("Match host : ",vhost_tmp);
                    vhost = vhost_tmp;
                    a.num.forEach(function(b){
                        if(harbors._config.vhost[b]['domain'] == vhost_tmp){
                            index = 10;
                            result = b;
                        }
                    });
                    vhost_tmp = harbors.$utils.vhostBack(vhost_tmp);
                }while(vhost_tmp != vhost && index++<10 && vhost != vhost_tmp);
                //与来路匹配的虚拟主机存在
                if(harbors._config.vhost[result]){
                    harbors.log("Host num is ", result, "!");
                    //缓存在虚拟主机列表内
                    _vhost[req.headers.host] = result;
                    harbors.$server.handle(req, res, result);
                    return undefined;
                }
                harbors.$server.handle(req, res, undefined);
            }
        }
        /**
         * TODO :
         * 获取系统当前的ip地址集合，检查需要监听的ip地址是否合法，不合法抛出错误。
         */
        a.ip ?
            ( harbors.log('Create server listen : ', a.ip, ':', a.listen), harbors.http.createServer(handle).listen(a.listen, a.ip) ) :
            ( harbors.log('Create server listen : ', a.listen), harbors.http.createServer(handle).listen(a.listen) );

    });
};

//服务响应处理
//Service response
exports.handle = function(req, res, num){
    harbors.log("Response handle... Url : ", req.url);
    var object = harbors.$handle.object(req, res, num);
    object._header["Server"] = harbors.SERVER;
    if(harbors._config.vhost[num] == undefined){
        harbors.log("Vhost is not found! Num : ", num);
        object.notFound();
        return undefined;
    }
    if(req.url=="/favicon.ico"){
        object._header["Expires"] = harbors._config.vhost[num]['cache']["expires"];
        object.display(harbors.path.join(harbors._config.vhost[num]['dir'], "favicon.ico"), true);
        return undefined;
    }
    var _rewrite = exports.rewrite(object, num);

    if(_rewrite!=undefined){
        harbors.log("Rewite success...");
        var dirTmp = harbors._config.vhost[num]['dir'];
        var realFileTmp = harbors.path.join(dirTmp, _rewrite);
        harbors.$server.matching(object, num, realFileTmp, _rewrite);
        return undefined;
    }

    //如果请求地址不为文件
    object._path.extname = harbors.path.extname(object._path.pathname);
    if(object._path.extname == ''){
        //逐个匹配默认文件
        var dir = harbors._config.vhost[num]['dir'];
        var pathName = object._path.pathname;
        var defaultFile = harbors._config.vhost[num]['default_file'];
        var realFile;
        var i = 0;
        do{
            var fileTmp = harbors.path.join( dir, pathName, defaultFile[i]);
            harbors.log("Testing : ", fileTmp);
            if(harbors.fs.existsSync(fileTmp)){
                realFile = fileTmp;
                break;
            }
        }while( ++i < defaultFile.length );
        harbors.log("Match file : " + realFile);
        if(realFile==undefined){
            harbors.log("The requested folder, the default file not found! ", object._url);
            object.notFound();
            return undefined;
        }
    }else{
        //如果请求的是文件
        var dir = harbors._config.vhost[num]['dir'];
        var pathName = object._path.pathname;
        var realFile = harbors.path.join( dir, pathName);
        if(!harbors.fs.existsSync(realFile)){
            harbors.log("The requested file, but not found! ", object._url);
            object.notFound();
            return undefined;
        }
    }
    //harbors.log("result file : ", realFile);
    harbors.$server.matching(object, num, realFile);
};

exports.matching = function(object, num, realFile, _rewrite){
    //逐个匹配默认模块解析器
    var moduleExtname = harbors._config.vhost[num]['support'];
    var module;
    for(var i = 0;i<moduleExtname.length;i++){
        if(realFile.indexOf(harbors._config.vhost[num][moduleExtname[i]]['extname'])>-1){
            module = moduleExtname[i];
            harbors.log("Support module : ", module);
            break;
        }
    }

    if(module==undefined){
        object.display(realFile, true);
        return undefined;
    }
    harbors.$module[module](object, realFile, _rewrite);
};

exports.rewrite = function(object, num){
    if(harbors._config.vhost[num]['rewrite']['on'] == false)
        return void 0;

    var _rewrite = harbors._config.vhost[num]['rewrite']['name'];

    //判断有木有该重写模块在缓存内
    _rewrite = harbors._rewrite[_rewrite];
    if(_rewrite){//存在,返回重写后的地址
        harbors.log("Rewrite start...");
        var _result = _rewrite(object._path.pathname);
        return _result;
    }
};