/**
 * 时间相关功能插件
 * 使用方法：
 *     var date = require('./module/date');
 *     var dateF = date(1386381387262).format('M-D',true);  //Y-M-D h:m:s依次为年-月-日 时:分:秒,第二个参数为是否补0
 *         =>"12-07"
 *     //返回给定日期那个星期的日期数组
 *     var dateF = date(1386381387262).week().timeSlot(7,'M-D',true);
 *         =>["12-01", "12-02", "12-03", "12-04", "12-05", "12-06", "12-07"]
 *
 * 方法：
 *     dateF.format()//格式化当天的时间
 *     dateF.timeSlot()//返回一个时间区间的数组
 *     dateF.lastHour()//上一小时
 *     dateF.nextHour()//下一小时
 *     dateF.yesterday()//昨天
 *     dateF.tomorrow()//明天
 *     dateF.lastWeek()//上星期的今天
 *     dateF.nextWeek()//下星期的今天
 *     dateF.week()//这星期开始的一天（周天）
 *     dateF.lastMonth()//上个月的今天
 *
 * 示例，取上个月的今天那个星期的星期一的日期：
 *     date().lastMonth().week().tomorrow().format('M-D',true);
 * 示例，取上个月今天的下一个星期整个星期的日期：
 *    date().lastMonth().nextWeek().week().timeSlot(7,'M-D',true);
 */


/**
 * 初始化函数对象
 * @param date
 * @returns {init}
 */
var app = function(date){
    return new app.fn.init(date);
};

/**
 * 公用时间戳跨度
 * @type {{seconds: number, minute: number, hour: number, day: number, week: number}}
 */
var publicParam = {
    seconds:1000,
    minute:60000,
    hour:3600000,
    day:86400000,
    week:604800000
};

/**
 * 初始化封装date对象
 * @type {{init: Function}}
 */
app.prototype.init = function(date){
    this.date = date ? (new Date(date)) : (new Date());
    if(this.date=='Invalid Date'){
        alert('Invalid Date');
        return null
    }
    return this;
};

/**
 * 返回固定格式的方法
 * @Format Y-M-D h:m:s依次为年-月-日 时:分:秒
 * @l 是否不够2位自动补0;
 */
app.prototype.format = function(Format,l){
    var date = this.date;
    var bl = null;
    if(l){
        bl = function(str){
            str = '0'+str;
            return str.substr(str.length-2);
        };
    }else{
        bl = function(str){return str;};
    }
    return Format.replace('Y',function(){
        return bl(date.getFullYear());
    }).replace('M',function(){
            return bl(date.getMonth()+1);
        }).replace('D',function(){
            return bl(date.getDate());
        }).replace('h',function(){
            return bl(date.getHours());
        }).replace('m',function(){
            return bl(date.getMinutes());
        }).replace('s',function(){
            return bl(date.getSeconds());
        });
};

/**
 * 同返回固定格式的方法，但是返回的是数组，第一个参数标记输出多长的日期
 */
app.prototype.timeSlot = function(num,Format,l,slot){
    var result = [];
    for(var i=0;i<num;i++){
        result.push(app.prototype.format.call(this,Format,l));
        slot=='hour' ?
            app.prototype.nextHour.call(this) :
            app.prototype.tomorrow.call(this);
    }
    return result;
};

/**
 * 更改对象时间为给定日期的昨天上一个小时
 */
app.prototype.lastHour = function(){
    this.date = new Date(this.date - publicParam.hour);
    return this;
};

/**
 * 更改对象时间为给定日期的下一小时
 */
app.prototype.nextHour = function(){
    this.date = new Date((this.date-0) + publicParam.hour);
    return this;
};

/**
 * 更改对象时间为给定日期的昨天
 */
app.prototype.yesterday = function(){
    this.date = new Date(this.date - publicParam.day);
    return this;
};


/**
 * 更改对象时间为给定日期的明天
 */
app.prototype.tomorrow = function(){
    this.date = new Date((this.date-0) + publicParam.day);
    return this;
};

/**
 * 更改对象时间为给定日期的7天前
 */
app.prototype.lastWeek = function(){
    this.date = new Date(this.date - publicParam.week);
    return this;
};

/**
 * 更改对象时间为给定日期的7天后
 */
app.prototype.nextWeek = function(){
    this.date = new Date((this.date-0) + publicParam.week);
    return this;
};

/**
 * 更改对象时间为给定日期当前星期的开始（星期天）
 */
app.prototype.week = function(){
    this.date = new Date(this.date-this.date.getDay()*publicParam.day);
    return this;
};

/**
 * 更改对象时间为给定日期上个月的今天
 */
app.prototype.lastMonth = function(){
    this.date = new Date(
        this.date.getFullYear() +
            '-' +
            this.date.getMonth() +
            '-' +
            this.date.getDate() +
            ' ' +
            this.date.getHours() +
            ':' +
            this.date.getMinutes() +
            ':' +
            this.date.getSeconds()
    );
    return this;
};

/**
 * fn继承app构造的方法
 * @type {Object|Function|app}
 */
app.fn = app.prototype;

/**
 * 继承所有fn下的方法
 * @type {fn|*|fn|Function|fn|fn}
 */
app.fn.init.prototype = app.fn;

module.exports = app;
