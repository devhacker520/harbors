var harbors = require("../harbors");

var path = require("path");
var fs = require("fs");

var _utils = require("../utils");
var _file = require("../file");

exports.handle = function(name, value){
    //没有传入参数
    if(name == void 0){
        return this._session;
    }

    var type = typeof(name);
    if(type == "object"){
        _utils.merge(this._session, name);
        return this._session;
    }else if(type == "string"){
        if(typeof(value) == "string"){
            this._session[name] = value;
        }
        return this._session[name];
    }
};

exports.load = function(object){
    var sessionConfig = object._config['nodejs'];
    var name = object.cookie(sessionConfig['session_id']);
    if(name == void 0){
        return void 0;
    }
    var sessionValue = "";
    var sessionFile = path.join(object._config.tmp_dir, "session", name);
    harbors.log("Session file : ", sessionFile);

    //判断文件是否存在
    if(fs.existsSync(sessionFile)){
        sessionValue = JSON.parse(fs.readFileSync(sessionFile).toString());
        //ip验证通过、过期时间验证通过
        if(sessionValue.ip == object.client.ip && sessionValue.time - new Date().valueOf() > 0){
            object._session = sessionValue.data;
        }
    }

};

exports.save = function(object){
    var sessionConfig = object._config['nodejs'];
    var fileDir = path.join(object._config.tmp_dir, "session");
    //console.log(fileDir)
    //创建存放session的文件夹，存在的话不执行
    _file.recursiveMkdir(fileDir);
    //判断session是否存在
    var cookie_ = object.cookie(sessionConfig['session_id']);
    //cookie不存在，加上cookie
    if(cookie_ == void 0){
        cookie_ = _utils.randomString(15);
        object.cookie(sessionConfig['session_id'], cookie_);
    }
    //console.log(object._session)
    var eTime = new Date().valueOf() + sessionConfig['session_survavil'].valueOf();
    //写入文件
    fs.writeFile(path.join(fileDir, cookie_),JSON.stringify({
        ip:object.client.ip,
        time:eTime,
        data:object._session
    }));
};