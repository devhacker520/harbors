var harbors = require('./harbors');

var _utils = require('./utils');
var _module_switch = require('./module/switch');

exports.mergeVhost = function(){
    harbors.log("Begin merge config...");

    if(!harbors._config.vhost.on){
        harbors.log("Vhost module is close.");
        //虚拟主机功能关闭，重写一台空的主机信息
        harbors._vhost = [{}];
    }

    if(harbors._vhost.length==0){
        harbors.log("Vhost list is empty.");
        //虚拟主机列表为空，重写一台空的主机信息
        harbors._vhost = [{}];
    }

    //合并主机配置到每个虚拟主机中
    var config = harbors._config;
    delete config.process;
    harbors._vhost.forEach(function(configItem){
        _utils.mergeAll(configItem, harbors._config, true);
        //主机域名未填写，给予默认*
        if(configItem.domain==undefined){
            configItem.domain = "*";
        }
    });

    //提取模块开关状态
    harbors._vhost.forEach(function(configItem, index){
        var module = 0x0;
        for(var p in configItem){//循环每一个主机配置
            if(_module_switch[p]){//如果配置在_module_switch下存在
                if(configItem[p]['on']){//并且打开了开关
                    module = _module_switch[p](module);
                }
            }
        }
        configItem._module = module;
        harbors.log(" ");
        harbors.log("Vhost : ", index," Module switch is : 0x", module.toString(16));
        harbors.log("Vhost : ", index," Domain : ", configItem.domain);
        harbors.log("Vhost : ", index," Ip : ", configItem.ip);
        harbors.log("Vhost : ", index," Listen : ", configItem.listen.toString());
    });

};

exports.extractionListen = function(){
    //循环虚拟主机列表
    harbors._vhost.forEach(function(configItem, index){
        var ip = configItem.ip;//监听ip
        var listen = configItem.listen;//监听端口数组
        var allow = true;
        //循环监听列表，查看是否重复监听
        harbors._listen.forEach(function(listenItem){
            //循环监听的端口数组
            configItem.listen.forEach(function(_listen){
                //监听端口已经存在，监听ip也相同
                if(listenItem['listen']==_listen && listenItem['ip']==ip){
                    listenItem.vhostNum.push(index);
                    allow = false;
                }
            });
        });

        if(allow){
            harbors._listen.push({ip:ip, listen:listen, vhostNum:[index]});
        }
    });

    harbors.log(" ");
    harbors.log("Listen object : ");
    harbors.log(harbors._listen);
};