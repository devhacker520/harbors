var harbors = require('../harbors');

var _fastcgi = require('./fastcgi');
var _utils = require('../utils');

var path = require('path');
var net = require('net');
var sys = require('sys');

module.exports = function (object, realFile) {

    var dir = path.dirname(realFile);
    var file = path.basename(realFile);

    var FCGI_VERSION = _fastcgi.constants.version;
    var FCGI_OFF = _fastcgi.constants.keepalive.OFF;
    var FCGI_RESPONDER = _fastcgi.constants.role.FCGI_RESPONDER;
    var FCGI_BEGIN = _fastcgi.constants.record.FCGI_BEGIN;
    var FCGI_STDIN = _fastcgi.constants.record.FCGI_STDIN;
    var FCGI_STDOUT = _fastcgi.constants.record.FCGI_STDOUT;
    var FCGI_PARAMS = _fastcgi.constants.record.FCGI_PARAMS;
    var FCGI_END = _fastcgi.constants.record.FCGI_END;

    var params = _utils.makeHeaders(object.client.headers, [
        ["SCRIPT_FILENAME", realFile],
        ["QUERY_STRING", object._path.query || ''],
        ["REQUEST_METHOD", object.client.method],
        ["SCRIPT_NAME", object._path.pathname],
        ["PATH_INFO", object._path.pathname],
        ["DOCUMENT_URI", object._path.path],
        ["REQUEST_URI", object._path.path],
        ["DOCUMENT_ROOT", dir],
        ["PHP_SELF", realFile],
        ["GATEWAY_PROTOCOL", "CGI/1.1"],
        ["SERVER_SOFTWARE", harbors.SERVER],

        ["SCRIPT_URL", object._path.pathname],
        ["SCRIPT_URI", "HTTP://" + object.client.headers.host + object._path.pathname],
        //["PATH", "C:\windows"]环境变量
        ["SERVER_NAME", object.client.headers.host],
        //["SERVER_ADDR", "127.0.0.1"]服务器ip
        //["SERVER_PORT", "80"]服务器端口
        //["REQUEST_SCHEME", "http"]
        ["REMOTE_PORT", (object.request.client._peername && object.request.client._peername.port.toString()) || ""],//远程端口
        ["SERVER_PORT", object.request.client.server._connectionKey.split(":").pop()],//远程端口
        ["REMOTE_ADDR", object.client.ip]
    ]);

    var connection = new net.Stream();
    connection.setNoDelay(true);

    var writer = null;
    var parser = null;
    var header = {
        "version": FCGI_VERSION,
        "type": FCGI_BEGIN,
        "recordId": 0,
        "contentLength": 0,
        "paddingLength": 0
    };
    var begin = {
        "role": FCGI_RESPONDER,
        "flags": FCGI_OFF
    };
    var collectedStdin = [];
    var noMoreData = false;

    function endRequest() {
        if (writer) {
            header.type = FCGI_STDIN;
            header.contentLength = 0;
            header.paddingLength = 0;
            writer.writeHeader(header)
            connection.write(writer.tobuffer());
            connection.end();
        } else {
            noMoreData = true;
        }
    }

    function sendRequest(connection) {
        header.type = FCGI_BEGIN;
        header.contentLength = 8;
        writer.writeHeader(header);
        writer.writeBegin(begin);
        connection.write(writer.tobuffer());

        header.type = FCGI_PARAMS;
        header.contentLength = _fastcgi.getParamLength(params);
        writer.writeHeader(header);
        writer.writeParams(params);
        connection.write(writer.tobuffer());


        header.type = FCGI_PARAMS;
        header.contentLength = 0;
        writer.writeHeader(header);
        connection.write(writer.tobuffer());

        // header.type = FCGI_STDOUT;
        // writer.writeHeader(header);
        // connection.write(writer.tobuffer());

        if ((object.client.method != 'PUT' && object.client.method != 'POST')) {
            endRequest()
        } else {
            for (var j = 0; j < collectedStdin.length; ++j) {
                header.type = FCGI_STDIN;
                header.contentLength = collectedStdin[j].length;
                header.paddingLength = 0;
                writer.writeHeader(header);
                writer.writeBody(collectedStdin[j]);
                connection.write(writer.tobuffer());
            }
            collectedStdin = [];
            if (noMoreData) {
                endRequest();
            }
        }
    };

    object.request.on('data', function (chunk) {
        if (writer) {
            header.type = FCGI_STDIN;
            header.contentLength = chunk.length;
            header.paddingLength = 0;
            writer.writeHeader(header);
            writer.writeBody(chunk);
            connection.write(writer.tobuffer())
        } else {
            collectedStdin.push(chunk);
        }
    });

    object.request.on('end', endRequest);

    connection.ondata = function (buffer, start, end) {
        parser.execute(buffer, start, end);
    };

    connection.addListener("connect", function () {
        writer = new _fastcgi.writer();
        parser = new _fastcgi.parser();

        writer.encoding = 'binary';

        var body = "";

        parser.onRecord = function (record) {
            if (record.header.type == FCGI_STDOUT) {
                body += record.body;
            } else if (record.header.type == FCGI_STDOUT) {
                body += record.body;
            } else if (record.header.type == FCGI_END) {
                var parts = body.split("\r\n\r\n");

                var headers = parts.shift();
                var headerParts = headers.split("\r\n");

                body = parts.join("\r\n\r\n");

                var responseStatus = 200;

                headers = [];
                try {
                    for (var i in headerParts) {
                        header = headerParts[i].split(': ');
                        if (header[0] && header[0].indexOf('Status') >= 0) {
                            responseStatus = header[1].substr(0, 3);
                            continue;
                        }

                        headers.push([header[0], header[1]]);
                    }
                } catch (err) {
                    //console.log(err);
                }


//                if(responseStatus === "404") {
////                    object.notFound();
////                    parser.onRecord = function() {};
////                    connection.end();
////                    return void 0;
//                    responseStatus = 404;
//                }

                //写入头部缓存
                headers.map(function (a) {
                    object._header[a[0]] = a[1];
                });
                object._statusCode = responseStatus;

                object.send(body)
            }
        };

        parser.onError = function (err) {
            //console.log(err);
        };

        sendRequest(connection);
    });

    connection.addListener("close", function () {
        connection.end();
    });

    connection.addListener("error", function (err) {
        sys.puts(sys.inspect(err.stack));
        object.notFound();
        connection.end();
    });
    var fcgi_host = object._config['php']['fastcgi_host'];
    var fcgi_port = object._config['php']['fastcgi_port'];

    connection.connect(fcgi_port, fcgi_host);
};