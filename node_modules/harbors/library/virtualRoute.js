var _display = require('./display');
var _render = require('./render');
var _cookie = require('./cookie');
var response = require('./response');
var path = require('path');
var querystring = require('querystring');
var cache = require('./cache');
if(harbors.config.redis&&harbors.config.redis.Use){
    var _redis = require('./redis');
}
if(harbors.config.mysql&&harbors.config.mysql.Use){
    var _mysql = require('./mysql');
}

/**
 * 虚拟主机路由
  * @param config
 * @returns {Array}
 */
exports.extraction = function(config){
    var route = [];

    //判断虚拟主机的类型和配置，为其生成封装路由的数组
    if(config.serverType=='static'){
        route.push(function(req,res){
            _display(config.serverDir + '/view/' + req.url,req,res,config);
        });
        return route;
    }

    if(config.serverType=='dynamic'){
        //不需要设置自动封装的类
        route.push(display);
        route.push(path_);
        route.push(cookie);
        route.push(POST);
        route.push(GET);
        route.push(setCookie);
        route.push(redirect);
        route.push(send);

        //需要开启设置的类
        if(config.jade){
            route.push(render);
        }
        if(config.session){
            route.push(session);
            route.push(setSession);
        }
        if(config.debug){
            route.push(clearController);
        }

        //最后一个路由
        route.push(filter);
        return route;
    }

};

/**
 * 清空控制器缓存
 */
function clearController(req,res,config){
    cache.controller(config);
    res._routeNum++;
    config.route[config.route.length-1](req,res,config);
}

/**
 * sendfengzhuang
 */
function send(req,res,config){
    res.send = function(str){

        (config.cacheLevel==1 || config.cacheLevel==3) && cache.client(res);

        res.setHeader('Content-Type', "text/html; charset=utf-8");
        response.h200(res);
        res.end(str);

        (config.cacheLevel==2 || config.cacheLevel==3) && cache.mem(req,str,config);
    };
    res._routeNum++;
    config.route[config.route.length-1](req,res,config);
}

/**
 * 静态文件显示
 * @param req
 * @param res
 * @param config
 */
function display(req,res,config){
    res.display = function(file){
        _display(file,req,res,config);
    };
    res._routeNum++;
    config.route[config.route.length-1](req,res,config);
}

/**
 * 动态jade文件显示
 * @param req
 * @param res
 * @param config
 */
function render(req,res,config){
    res.render = function(file,obj){
        _render(file,obj||{},req,res,config);
    };
    res._routeNum++;
    config.route[config.route.length-1](req,res,config);
}

/**
 * 解析session
 * @param req
 * @param res
 * @param config
 */
function session(req,res,config){
    _redis.get(req.cookie[config.sessionId], function (err, obj) {
        var t = eval('('+obj+')');
        if(t==null) t={};
        req.session = t;
        res._routeNum++;
        config.route[config.route.length-1](req,res,config);
    });
}

/**
 * 设置session
 * @param req
 * @param res
 * @param config
 */
function setSession(req,res,config){
    res.setSession = function(session,expire){
        //删除session
        if(expire==0&&req.cookie[config.sessionId]){
            for(var p in session){
                delete req.session[p];
            }
            _redis.set(req.cookie[config.sessionId], JSON.stringify(req.session));
            return false;
        }
        if(req.cookie[config.sessionId]&&req.session!=null){
            _redis.set(req.cookie[config.sessionId], JSON.stringify(session));
            //过期时间
            _redis.expire(req.cookie[config.sessionId], expire||config.SessionSurvavil/1000);
        }else{
            var a = harbors.utils.uid(20);
            var b = {};
            b[config.sessionId] = a;
            res.setCookie(b,undefined,undefined,true);
            _redis.set(a, JSON.stringify(session));
            //过期时间
            _redis.expire(a, expire||config.SessionSurvavil/1000);
        }
    };
    res._routeNum++;
    config.route[config.route.length-1](req,res,config);
}

/**
 * 解析req.url来访路径为数组格式
 * @param req
 * @param res
 * @param config
 * @private
 */
function path_(req,res,config){
    req.path = req.url.split('?')[0].replace(/^\//,'').split('/');
    if(req.path[0]=='favicon.ico'){
        res.display(config.serverDir + '/' + req.url);
    }else{
        res._routeNum++;
        config.route[config.route.length-1](req,res,config);
    }
}

/**
 * 解析cookie
 * @param req
 * @param res
 * @param config
 */
function cookie(req,res,config){
    req.cookie = _cookie.cookie(req);
    res._routeNum++;
    config.route[config.route.length-1](req,res,config);
}

/**
 * 设置cookie
 * @param req
 * @param res
 * @param config
 */
function setCookie(req,res,config){
    res.setCookie = function(cookie,path,time,httponly){
        _cookie.setCookie(cookie,time,path,req,res,httponly);
    };
    res._routeNum++;
    config.route[config.route.length-1](req,res,config);
}

/**
 * 解析get参数
 * @param req
 * @param res
 * @param config
 * @constructor
 */
function GET(req,res,config){
    var t = req.url.split('?');
    if(t[1]){
        req.get = querystring.parse(t[1]);
    }else{
        req.get = {};
    }
    res._routeNum++;
    config.route[config.route.length-1](req,res,config);
}

/**
 * 解析post参数
 * @param req
 * @param res
 * @param config
 * @constructor
 */
function POST(req,res,config){
    var info = '';
    req.addListener('data', function(chunk){
        info += chunk;
    }).addListener('end', function(){
            info = querystring.parse(info);
            req.post = info;
            res._routeNum++;
            config.route[config.route.length-1](req,res,config);
        });
}

/**
 * 跳转页面的方法
 * @param req
 * @param res
 * @param config
 */
function redirect(req,res,config){
    res.redirect = function(path){
        res.end('<script>window.location.href="'+path+'"</script>');
    };
    res._routeNum++;
    config.route[config.route.length-1](req,res,config);
}

/**
 * 传递控制权限给filter
 * @param req
 * @param res
 * @param config
 */
function filter(req,res,config){
    if(res._routeNum+1>=config.route.length){//自身函数完全完成的判断
        //最后一个路由，转交权限给filter.js
        var controller = path.normalize(harbors.config.baseDir+'/host/'+config.serverDir+'/controller/filter');
        config.log('controller : '+controller);
        try{
            require(controller)(req,res);
        }catch(err){
            console.log(err);
            response.h404(res);
        }
    }
}

