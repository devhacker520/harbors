/**
 * 检查缓存的模块
 */
harbors._cache = {};//存放缓存的对象
harbors._timeOut = {};//计时器队列
var response = require('./response');

/**
 * 客户端缓存检查
 * @param path
 * @param callback1
 * @param callback2
 */
exports.check = function(path,config,req,res,callback2){
    switch(config.cacheLevel){
        case 1:
            if(req.headers['if-modified-since']){
                if((new Date()-0)-(new Date(req.headers['if-modified-since'])-0)>config.dynamicTime){
                    callback2();
                }else{
                    harbors.log('Cache : 304 => ' + path);
                    response.h304(res);
                }
            }else{
                callback2();
            }
            break;
        case 2:
            if(harbors._cache[path]){
                harbors.log('Cache : mem => ' + path);
                response.h200(res);
                res.end(harbors._cache[path]);
            }else{
                callback2();
            }
            break;
        case 3:
            if(req.headers['if-modified-since']){
                if((new Date()-0)-(new Date(req.headers['if-modified-since'])-0)>10000){
                    if(harbors._cache[path]){
                        harbors.log('Cache : mem => ' + path);
                        response.h200(res);
                        res.end(harbors._cache[path]);
                    }else{
                        callback2();
                    }
                }else{
                    harbors.log('Cache : 304 => ' + path);
                    response.h304(res);
                }
            }else{
                if(harbors._cache[path]){
                    harbors.log('Cache : mem => ' + path);
                    response.h200(res);
                    res.end(harbors._cache[path]);
                }else{
                    callback2();
                }
            }
            break;
        default:
            callback2();
    }
};

/**
 * 内存缓存
 * @param req
 * @param html
 */
exports.mem = function(req,html,config){
    harbors._cache[req.headers.host+req.url] = html;
    if(harbors._timeOut&&harbors._timeOut[req.headers.host+req.url]){
        clearTimeout(harbors._timeOut[req.headers.host+req.url]);
    }
    harbors._timeOut[req.headers.host+req.url] = setTimeout(function(){
        delete harbors._cache[req.headers.host+req.url];
    },config.dynamicTime);

};

/**
 * 客户端缓存
 * @param res
 */
exports.client = function (res){

    var lastModified = new Date().toUTCString();
    res.setHeader("Last-Modified", lastModified);

};