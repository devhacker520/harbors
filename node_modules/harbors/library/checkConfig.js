/**
 * 检查配置文件
 */
var path = require('path');
var os = require('os');
var error = 0;
var warning = 0;

var app = {
    listenPort:function(config){
        if(typeof(config.listenPort)!='number'&&typeof(config.listenPort-0)!='number'){
            console.log('config.listenPort is not a number');
            error++;
        }
    },
    baseDir:function(config){
        if(config.baseDir!=path.join(__dirname, '/../../..')){
            console.log('config.baseDir folder is missing');
            warning++
        }
    },
    clusterNum:function(config){
        if(config.clusterNum<=0){
            console.log('No open process');
            error++;
        }
        if(os.cpus().length<config.clusterNum){
            console.log('Opened multi process');
            warning++;
        }
    },
    //虚拟主机设置
    vhost:function(config){
        if(typeof(config.vhost)!='boolean'){
            console.log('config.vhost not a Boolean');
            error++;
        }
    },
    serverType:function(config){
        if(config.vhost==false&&config.serverType!='dynamic'&&config.serverType!='static'){
            console.log('config.serverType is warning');
            error++;
        }
    },
    serverDir:function(config){
        if(typeof(config.serverDir)!='string'){
            console.log('config.serverDir not a String');
            error++;
        }
    },
    staticTime:function(config){
        if(typeof(config.staticTime)!='number'){
            console.log('config.staticTime is not a number');
            error++;
        }else{
            if(config.staticTime>24*60*60*1000){
                console.log('config.staticTime cache time too long');
                warning++;
            }
        }
    },
    sraticFile:function(config){
        if(typeof(config.sraticFile)!='string'){
            console.log('config.sraticFile is not a String');
            error++;
        }else{
            if(!/(\.html|\.htm|\.jpg|\.png|\.gif)/.test(config.sraticFile)){
                console.log('config.sraticFile Please make sure the file type');
                warning++;
            }
        }
    },
    session:function(config){
        if(typeof(config.session)!='boolean'){
            console.log('config.session not a Boolean');
            error++;
        }else{
            if(config.session&&((!config.redis)||(config.redis&&!config.redis.Use))){
                console.log('config.session Requires redis');
                error++;
            }
        }
    },
    sessionId:function(config){
        if(typeof(config.sessionId)!='string'){
            console.log('config.sessionId not a String');
            error++;
        }
    },
    SessionSurvavil:function(config){
        if(typeof(config.SessionSurvavil)!='number'){
            console.log('config.SessionSurvavil is not a number');
            error++;
        }else{
            if(config.SessionSurvavil>24*60*60*1000){
                console.log('config.SessionSurvavil cache time too long');
                warning++;
            }
        }
    },
    jade:function(config){
        if(typeof(config.jade)!='boolean'){
            console.log('config.jade not a Boolean');
            error++;
        }
    },
    dynamicTime:function(config){
        if(typeof(config.dynamicTime)!='number'){
            console.log('config.dynamicTime is not a number');
            error++;
        }else{
            if(config.dynamicTime>1*60*60*1000){
                console.log('config.dynamicTime cache time too long');
                warning++;
            }
        }
    },
    gzip:function(config){
        if(typeof(config.gzip)!='boolean'){
            console.log('config.gzip not a Boolean');
            error++;
        }
    },
    gzipFile:function(config){
        if(typeof(config.gzipFile)!='object'){
            console.log('config.gzipFile not a object');
            error++;
        }
    }
};


module.exports = function(){
    error = 0;
    warning = 0;
    var index = 0;
    for(var p in app){
        index++;
        app[p](harbors.config);
    }
    console.log('Config check - Warning : ' + warning + '/' + index + ' ; Error : ' + error + '/' + index + ' ; ')
};