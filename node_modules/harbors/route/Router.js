var harbors = require('../index');

harbors.Router = harbors.Class.extend({
    //route rule
    _routeTable: null,
    //route rule length
    length: null,
    //If access to a folder, find the default file
    _defaultController: null,
    //route is not found
    _notFound: null,
    //route error
    _error: null,

    /**
     * Init Router object
     *
     * @param routeTable
     */
    ctor: function(routeTable){

        this._routeTable = routeTable || {};
        this._defaultController = [];

        this.length = 0;
        for(var p in this._routeTable){
            this.length++;
        }

        this._notFound = function(req, res){
            res.end('route is not found.');
        };
    },

    /**
     * Gets the routing handler function
     *
     * @returns {Function}
     * @private
     */
    route: function(req, res){
        var url = req.url.split('?')[0];

        if(this._routeTable[url]){

            this._routeTable[url](req, res);
        }else{

            if(/\/$/.test(url)){

                for(var i=0;i<this._defaultController.length;i++){
                    if(this._routeTable[url + this._defaultController[i]]){

                        this._routeTable[url + this._defaultController[i]](req, res);
                        return;
                    }
                }

                this._notFound(req, res);
            }else{
                this._notFound(req, res);
            }
        }

    },

    /**
     * Set default controller list
     *
     * @param {Array|string} fileArray
     */
    setDefaultController: function(fileArray){
        var _type = typeof fileArray;
        if(_type === 'object'){

            if(Array.isArray(fileArray)){
                this._defaultController.concat(fileArray);
            }
        }else{
            this._defaultController.push(fileArray);

        }
    },

    /**
     * Remove default file list
     *
     * @param {string} file
     */
    removeDefaultController: function(file){
        for(var i=0;i<this._defaultController.length;i++){
            if(this._defaultController[i] == file){
                this._defaultController.splice(i, 1);
                i--;
            }
        }
    },

    /**
     * Set new mime info
     *
     * @param {String} name
     * @param {String} value
     */
    setMime: function(name, value){

        if(typeof name === 'string' && typeof value === 'string'){

            this._mime[name] = value;
        }else{
            harbors.log('setMime is error.');
        }
    },

    /**
     * Get mime or list
     *
     * @returns {*}
     */
    getMime: function(){
        switch(arguments.length){
            case 1:
                if(this._mime[arguments[0]]){
                    return this._mime[arguments[0]];
                }
                break;
            default:
                return this._mime;
        }
    },

    /**
     * Get route function of handle
     *
     * @param {Number} num
     * @returns {*}
     */
    getRoute: function(num){
        switch(arguments.length){
            case 1:
                if(this._routeTable[arguments[0]]){
                    return this._routeTable[arguments[0]];
                }else{
                    return undefined;
                }
                break;
            default:
                return this._routeTable;
        }
    },

    /**
     * Set a function for not found route
     *
     * @param {Function} Function
     */
    setNotFound: function(Function){
        if(typeof Function === 'function')
            this._notFound = Function;
        else
            harbors.log('setNotFound is error.');
    },

    /**
     * Set a function for error
     *
     * @param {Function} Function
     */
    setError: function(Function){
        if(typeof Function === 'function')
            this._error = Function;
        else
            harbors.log('setError is error.');
    }
});

harbors.Router.create = function(routeTable){

    if(typeof routeTable !== 'object') routeTable = undefined;
    return new harbors.Router(routeTable);
};