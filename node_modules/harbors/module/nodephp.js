var url     = require('url');
var fs      = require('fs');
var path    = require("path");
var net     = require("net");
var sys     = require("sys");
var fastcgi = require("./fastcgi");
var querystring = require('querystring');

var NODEPHP_STATIC = 'static';
var NODEPHP_FCGI   = 'fcgi';

var FCGI_RESPONDER = fastcgi.constants.role.FCGI_RESPONDER;
var FCGI_BEGIN     = fastcgi.constants.record.FCGI_BEGIN;
var FCGI_STDIN     = fastcgi.constants.record.FCGI_STDIN;
var FCGI_STDOUT    = fastcgi.constants.record.FCGI_STDOUT;
var FCGI_PARAMS    = fastcgi.constants.record.FCGI_PARAMS;
var FCGI_END       = fastcgi.constants.record.FCGI_END;

function makeHeaders(headers, params) {
    if (headers.length <= 0) {
        return params;
    }

    for (var prop in headers) {
        var head = headers[prop];
        prop = prop.replace(/-/, '_').toUpperCase();
        if (prop.indexOf('CONTENT_TYPE') < 0) {
            // Quick hack for PHP, might be more or less headers.
            prop = 'HTTP_' + prop;
        }

        params[params.length] = [prop, head]
    }
    return params;
}

function server(request,params,options,callback) {
    var connection = new net.Stream();
    connection.setNoDelay(true);

    var writer = null;
    var parser = null;

    var header = {
        "version": fastcgi.constants.version,
        "type": FCGI_BEGIN,
        "recordId": 0,
        "contentLength": 0,
        "paddingLength": 0
    };
    var begin = {
        "role": FCGI_RESPONDER,
        "flags": 0
    };

    var body="";
    var headers = [];
    var recCheck = true;

    function sendRequest (connection) {
        header.type = FCGI_BEGIN;
        header.contentLength = 8;
        writer.writeHeader(header);
        writer.writeBegin(begin);
        connection.write(writer.tobuffer());

        header.type = FCGI_PARAMS;
        header.contentLength = fastcgi.getParamLength(params);
        writer.writeHeader(header);
        writer.writeParams(params);
        connection.write(writer.tobuffer());

        header.type = FCGI_STDOUT;
        writer.writeHeader(header);
        connection.write(writer.tobuffer());

        connection.end();
    }

    connection.ondata = function (buffer, start, end) {
        parser.execute(buffer, start, end);
    };

    connection.addListener("connect", function() {
        writer = new fastcgi.writer();
        parser = new fastcgi.parser();


        parser.onRecord = function(record) {
            if (record.header.type == FCGI_STDOUT) {
                if(recCheck){
                    recCheck = false;
                    record.body = record.body.replace(/^(.*?\r\n)*\r\n/,function(m){
                        m = m.split('\r\n');
                        m.map(function(n){
                            if(n!=''){
                                var k,v;
                                v = n.replace(/^.*?\:\s*/,function(a){
                                    k = a.split(':')[0];
                                    return '';
                                });
                                if(k=='Status')
                                    request._statusCode = parseInt(v);
                                else
                                    request.res.setHeader(k,v);
                            }
                        });
                        return '';
                    })
                }
                body += record.body;
            }
        };

        parser.onError = function(err) {
            console.log(err);
        };

        sendRequest(connection);
    });

    connection.addListener("close", function() {
        request.send(body);
        connection.end();
    });

    connection.addListener("error", function(err) {
        sys.puts(sys.inspect(err.stack));
        connection.end();
    });

    connection.connect(options.fcgi.port, options.fcgi.host);
}

function serveFpm(request,options,callback) {
    var file = request.path._url + request.vhost.module;
    var _file = request.path.url + request.vhost.module;
    var dir = request.vhost.dir;
    try {
        var fs_buffer = fs.readFileSync(dir + file, 'utf8');
    } catch (err) {
        request.notFound();
    }
    var qs = url.parse(request.req.url).query ? url.parse(request.req.url).query : '';
    var params = makeHeaders(request.req.headers, [
        ["SCRIPT_FILENAME",path.join(dir,file)],
        ["REMOTE_ADDR",request.req.connection.remoteAddress],
        ["QUERY_STRING", 'test=123'],
        ["REQUEST_METHOD", request.req.method],
        ["SCRIPT_NAME", file],
        ["DOCUMENT_URI", file],
        ["PATH_INFO", file],
        ["REQUEST_URI", request.path.url],
        ["DOCUMENT_ROOT", dir],
        ["PHP_SELF", fs_buffer],
        ["GATEWAY_PROTOCOL", "CGI/1.1"],
        ["SERVER_SOFTWARE", "HARBORS " + harbors.version]
    ]);

    server(request,params,options,callback);
}

exports.nodephp = function createServer(request,callback) {

    var options = {
        fcgi: {
            port: 9000,
            host: '127.0.0.1'
        }
    };
    serveFpm(request,options,callback);

};

exports.NODEPHP_TYPE_STATIC = NODEPHP_STATIC;
exports.NODEPHP_TYPE_FCGI   = NODEPHP_FCGI;