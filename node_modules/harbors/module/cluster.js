/**
 * The process of cluster module
 */
var cluster = require('cluster');
var http = require('http');
var path = require('path');
var $fs = require('../lib/file');
var _m_request = require('./request');
var _m_server = require('./server');
var _m_log = require('./log');
var _m_php = require('./nodephp');

/**
 * master process
 */
exports.master = function(){

    //定时检查session文件是否超时
    var dir_tmp = {};
    for(var p in harbors.config){
        if(harbors.config[p]['tmp_dir']){
            var pathDir = harbors.config[p]['tmp_dir'];
            dir_tmp[pathDir] = true//记录查找过的文件夹
            pathDir = path.join(harbors.config[p]['tmp_dir'],'session');
            var files = $fs.readDir(pathDir);
            files.map(function(a){
                var path_tmp = path.join(pathDir,a);
                var json = $fs.readJson(path_tmp);
                if(json&&json.time<new Date()-0) $fs.unlink(path_tmp);
            });
        }
    }

    var message = function(msg){
        switch(msg.type){
            case 'log':
                _m_log.write(msg);
                break;
        }
    };

    var createWorker = function(){
        var worker = cluster.fork();
        worker.on('exit', function(code, signal) {
            //重启worker（此时进程id会增加1，以示和原错误关闭进程区别）
            !worker.suicide && (console.log('Separation of new sub process process...'),setTimeout(createWorker,2000));
        });
        worker.on('message',function(str,f){
            try{
                str = JSON.parse(str);
            }catch(err){
                console.log(err);
            }
            message(str);
        });
    };

    console.log('HARBORS child_process num is '+harbors.config.server.process);

    for(var i=0;i<harbors.config.server.process;i++){
        createWorker();
    }

};

/**
 * worker process
 * @param {Function} callback
 */
exports.worker = function(callback){
    if(typeof(harbors.config.server.listen)=='string'){
        harbors.config.server.listen = [harbors.config.server.listen];
    }
    for(var i=0;i<harbors.config.server.listen.length;i++){
        http.createServer(function(req,res){
            callback(req,res);
        }).listen(harbors.config.server.listen[i]);
        console.log('listen port '+harbors.config.server.listen[i]);
    }
};

exports.server = function(req,res){
    harbors.debug('Run cluser.server [Module module/cluster.js]');

    var request = _m_request(req,res);
    if(request.vhost==undefined){
        return undefined;
    }
    //console.log(request.path)


    //检测静态文件存在
    //console.log(request.vhost.dir + request.path._url);
    var stM = $fs.exists();
    //console.log(stM);
    if(stM){
        harbors.debug('cluser.request is static [Module module/cluster.js]');
        request.display(request.path._url);
        return undefined;
    }

    //检测控制器文件存在
    //console.log(request.vhost.dir + request.path._url + request.vhost.module);
    var dyM = $fs.exists(request.vhost.dir + request.path._url + request.vhost.module);
    //console.log(dyM);
    if(dyM){
        switch(request.vhost.module_type){
            case 'fastcgi':
                _m_php.nodephp(request);
                break;
            default:
                _m_server.dyM(request);
        }
        harbors.debug('cluser.request is dymic [Module module/cluster.js]');
        return undefined;
    }

    //都不存在的情况
    request.notFound();
};