var http = require('http');
var cluster = require('cluster');
var response = require('../library/response');
var cache = require('../library/cache');

/**
 * 合并虚拟主机配置
 */
exports.mergeVirtualHost = function(){
    var config = harbors.utils.merge({},harbors.config);
    delete config.mysql;
    delete config.redis;
    delete config.listenPort;
    delete config.baseDir;
    delete config.clusterNum;
    delete config.vhost;
    if(harbors.config.vhost){
        for(var p in harbors.vhost){
            harbors.vhost[p] = harbors.utils.merge(config,harbors.vhost[p]);
        }
    }else{
        harbors.vhost = {'*':config};//虚拟主机功能未开启、读取默认配置给'*'主机
    }
};

/**
 * 创建虚拟路由
 */
exports.createVirtualRoute = function(){
    var virtualRouter = require('../library/virtualRoute');
    for(var p in harbors.vhost){
        harbors.vhost[p]['route'] = virtualRouter.extraction(harbors.vhost[p]);
    }
};

/**
 * 创建服务对象
 */
exports.createServer = function(){
    http.createServer(function(req,res){
        harbors.log('The child process to accept the request ID: #' + cluster.worker.id);
        cache.memory(req.headers.host+req.url,function(html){
            response.h200(res);
            res.end(html);
        },function(){
            //请求后判断虚拟主机，从route数组第一个函数开始执行
            try{
                var vhost = req.headers.host.split(":")[0];
                harbors.log('VHOST : ' + vhost);
                if(harbors.vhost[vhost]){
                    res._routeNum = 0;
                    for(var i=0;i<Math.max(harbors.vhost[vhost].route.length-1,1);i++){
                        harbors.vhost[vhost].route[i](req,res,harbors.vhost[vhost]);
                    }
                }else{
                    if(harbors.vhost['*']){//找默认虚拟主机，如果没有的抛出错误
                        res._routeNum = 0;
                        for(var i=0;i<Math.max(harbors.vhost['*'].route.length-1,1);i++){
                            harbors.vhost['*'].route[i](req,res,harbors.vhost['*']);
                        }
                    }else{
                        harbors.err('VHOST is not found : ' + vhost);
                        response.h404(res);
                    }
                }
            }catch(err){
                harbors.err(err);
            }
        });

    }).listen(harbors.config.listenPort);
};