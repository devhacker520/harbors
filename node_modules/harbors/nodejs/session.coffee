harbors = require('../harbors_modules/harbors')
exports.handle = (name, value) ->
  #没有传入参数
  return this._session if name == undefined

  type = typeof name
  return this._session['name'] if type == "undefined"
  if type == "object"
    harbors.$utils.merge this._session, name
  else if type == "string"
    if typeof value == "string"
      this._session[name] = value
    return this._session[name]
  return


#保存session的方法
exports.save = (object) ->
  #类型正确，写入session文件
  fileDir = harbors.path.join harbors._config.vhost[object._num].tmp_dir, 'session'
  #console.log(fileDir)
  #创建存放session的文件夹，存在的话不执行
  harbors.$file.recursiveMkdir fileDir
  #判断session是否存在
  sessionConfig = harbors._config.vhost[object._num]['nodejs']
  cookie_ = object.cookie sessionConfig['session_id']
  if cookie_ == undefined
    #cookie不存在，生成并且加入cookie
    cookie_ = harbors.$utils.randomString(15)
    object.cookie sessionConfig['session_id'], cookie_
  #写入文件
  #console.log(object._session)
  #计算session过期时间
  eTime = new Date().valueOf() + sessionConfig['session_survavil'];
  #写入文件
  harbors.fs.writeFile harbors.path.join(fileDir, cookie_),JSON.stringify({
    ip:object._ip,
    time:eTime,
    data:object._session
  })
  return



#读取session的方法
exports.load = (object, name, tmpDir) ->
  sessionFile = harbors.path.join tmpDir, 'session', name
  harbors.log "Session file : ", sessionFile
  #判断文件是否存在
  if harbors.fs.existsSync sessionFile
    ses = JSON.parse harbors.fs.readFileSync(sessionFile).toString()
    #console.log(ses)
    if ses.ip == object._ip && ses.time - new Date().valueOf() > 0
      object._session = ses.data
