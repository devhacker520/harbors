// Generated by CoffeeScript 1.6.3
(function() {
  var harbors;

  harbors = require('../harbors_modules/harbors');

  exports.handle = function(name, value) {
    var type;
    if (name === void 0) {
      return this._session;
    }
    type = typeof name;
    if (type === "undefined") {
      return this._session['name'];
    }
    if (type === "object") {
      harbors.$utils.merge(this._session, name);
    } else if (type === "string") {
      if (typeof value === "string") {
        this._session[name] = value;
      }
      return this._session[name];
    }
  };

  exports.save = function(object) {
    var cookie_, eTime, fileDir, sessionConfig;
    fileDir = harbors.path.join(harbors._config.vhost[object._num].tmp_dir, 'session');
    harbors.$file.recursiveMkdir(fileDir);
    sessionConfig = harbors._config.vhost[object._num]['nodejs'];
    cookie_ = object.cookie(sessionConfig['session_id']);
    if (cookie_ === void 0) {
      cookie_ = harbors.$utils.randomString(15);
      object.cookie(sessionConfig['session_id'], cookie_);
    }
    eTime = new Date().valueOf() + sessionConfig['session_survavil'];
    harbors.fs.writeFile(harbors.path.join(fileDir, cookie_), JSON.stringify({
      ip: object._ip,
      time: eTime,
      data: object._session
    }));
  };

  exports.load = function(object, name, tmpDir) {
    var ses, sessionFile;
    sessionFile = harbors.path.join(tmpDir, 'session', name);
    harbors.log("Session file : ", sessionFile);
    if (harbors.fs.existsSync(sessionFile)) {
      ses = JSON.parse(harbors.fs.readFileSync(sessionFile).toString());
      if (ses.ip === object._ip && ses.time - new Date().valueOf() > 0) {
        return object._session = ses.data;
      }
    }
  };

}).call(this);

/*
//@ sourceMappingURL=session.map
*/
