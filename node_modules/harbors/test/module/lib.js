var assert = require("assert");

var $url = require('../../lib/url');
var $config = require('../../lib/config');
var $file = require('../../lib/file');

describe('config-module',function(){

    describe('#load',function(){

        var config = $config.load('./node_modules/harbors/config/config.ini');
        harbors.config = config;
        it('read file',function(){
            assert.notEqual(undefined, config);
            assert.notEqual(undefined, config.server);
        });

        it('read setting',function(){
            assert.ifError(!/(\S+\:|\/)/.test(config.server.dir));
            assert.equal('index.html', config.server.default_file);
            assert.equal('false', config.server.session);
            assert.equal('HsessID', config.server.session_id);
            assert.equal('3600000', config.server.session_survavil);
            assert.equal('true', config.server.gzip);
            assert.equal('html|css|js', config.server.gzip_file);
            assert.equal('all', config.server.deny);
            assert.equal('127.0.0.2', config.server.allow[1]);
            assert.equal('127.0.0.1', config.server.allow[0]);
            assert.equal('false', config.server.debug);
            assert.equal('86400000', config.server.expires);
            assert.equal('1800000', config.server.cache_time);
            assert.ifError(!/(\S+\:|\/)/.test(config.server.log_dir));
            assert.equal('256', config.server.log_size);
            assert.ifError(!/(\S+\:|\/)/.test(config.server.tmp_dir));
            assert.equal('3001', config.server.listen[1]);
            assert.equal('3000', config.server.listen[0]);
            assert.equal('1', config.server.process);
            assert.equal('false', config.server.vhost);
            assert.equal('_.js', config.server.module);
        });

        var config2 = $config.load('./node_modules/harbors/config/vhost.ini');
        harbors.utils.merge(harbors.config,config2,false);
        it('read vhost file',function(){
            assert.notEqual(undefined, config2);
            assert.notEqual(undefined, config2['*.www.itharbors.com:80']);
        });

        it('read vhost setting',function(){
            assert.equal('false', config2['*.www.itharbors.com:80'].gzip);
            assert.equal('css|html', config2['*.www.itharbors.com:80'].gzip_file);
            assert.equal('66400000', config2['*.www.itharbors.com:80'].expires);
            assert.equal('1800000', config2['*.www.itharbors.com:80'].cache);
            assert.ifError(!/(\S+\:|\/)/.test(config2['*.www.itharbors.com:80'].log_dir));
            assert.equal('www', config2['*.www.itharbors.com:80'].rewrite);
        });

    });

    describe('#merge',function(){

        $config.merge();
        it('merge config',function(){
            assert.ifError(!harbors.config['*.www.itharbors.com:80']);
        });

        it('merge check',function(){
            assert.equal('www', harbors.config['*.www.itharbors.com:80'].rewrite);
            assert.equal('false', harbors.config['*.www.itharbors.com:80'].gzip);
            assert.equal(harbors.config.server.dir, harbors.config['*.www.itharbors.com:80'].dir);
        });

    });

});

describe('url-module', function(){

    describe('#completion', function(){
        it('url add /index', function(){
            assert.equal('/index', $url.completion('/index'));
            assert.equal('/index/index', $url.completion('/index/'));
        });
    });

    describe('#analytical',function(){
        it('get param check',function(){
            assert.equal('test', $url.analytical('/index?get=test')['get']['get']);
            assert.equal('99', $url.analytical('/index?get=test&ff=99')['get']['ff']);
        });
        it('url param check',function(){
            assert.equal('/index', $url.analytical('/index?get=test')['url']);
            assert.equal('/index/ooo', $url.analytical('/index/ooo?get=test')['url']);
        });
        it('route param check',function(){
            assert.equal('index', $url.analytical('/index?get=test')['route'][0]);
            assert.equal('ooo', $url.analytical('/index/ooo?get=test')['route'][1]);
        });
    });

    describe('#host',function(){
        it('host add port num',function(){
            assert.equal('127.0.0.1:80', $url.host('127.0.0.1'));
            assert.equal('127.0.0.1:99', $url.host('127.0.0.1:99'));
            assert.equal('dev.baidu.com:80', $url.host('dev.baidu.com'));
            assert.equal('dev.baidu.com:3000', $url.host('dev.baidu.com:3000'));
        });
    });

    describe('#vhost',function(){
        it('find vhost name',function(){
            assert.equal('www', $url.vhost('*.www.itharbors.com:80',{headers:{host:'dev.www.itharbors.com:80'}})['rewrite']);
        });
        console.log(harbors._vhost)
        it('vhost cache array',function(){
            assert.equal('www', harbors._vhost['dev.www.itharbors.com:80']['rewrite']);
        })
    });

});