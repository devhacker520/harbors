var harbors = require('../index');

var cluster = require('cluster');

harbors.Cluster = harbors.Class.extend({

    //Cluster worker length
    length: null,

    //Worker object
    _worker: null,

    //Worker task list
    _task: null,

    //init function
    ctor: function(){
        this.length = 0;
        this._worker = [];
        this._task = {};

        if(cluster.isWorker){
            var self = this;
            process.on('message', function(info){

                if(self && info.type === 'task'){
                    self._task[info.name]();
                    self = null;
                }
            });
        }
    },

    //new task
    setTask: function(name, handle){
        if(typeof name === 'string' && typeof handle === 'function'){
            this._task[name] = handle;
        }else{
            harbors.log('setWorker is error.');
        }
    },

    fork: function(name){
        if(cluster.isMaster){

            if(this._task[name]){
                var _cp = cluster.fork();
                this._event(_cp);

                _cp.send({
                    type: 'task',
                    name: name
                });

                this.length++;
                this._worker.push(_cp);
            }else{
                harbors.log('fork error, %s is not found.', name);
            }
        }

    },

    getWorker: function(num){
        if(cluster.isMaster){
            num = parseInt(num);
            if(isNaN(num)){
                return this._worker;
            }else{
                return this._worker[num];
            }
        }
    },

    _event: function(cp){
        var self = this;
        cp.on('close', function(){
            self.length--;
        });

        cp.on('error', function(){
            self.length--;
        });
    },

    closeAll: function(){
        var _worker = this._worker;
        _worker.forEach(function(cp, i){
            cp.kill();
        });
    },

    close: function(pid){
        var _worker = this._worker;
        _worker.forEach(function(cp, i){
            if(cp.pid == pid){
                cp.kill();
            }
        });
    }

});

harbors.Cluster.create = function(){

    return new harbors.Cluster();
};